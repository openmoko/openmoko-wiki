The third version of the Freerunner Navigation Board was necessary because the compass chip used on the [[Freerunner Navigation Board]] and the [[Freerunner Navigation Board v2]] has been discontinued.

[[Image:FRNBv3_front+back_small.jpg|thumb]]

=Features=

Due to the new, smaller compass chip, the FRNBv3 offers a complete 10-DoF navigation solution. In addition to the 3D gyroscope, 3D compass and the barometer which are already known from the FRNBv2, the v3 adds a high resolution accelerometer. It should be more accurate for navigation purposes than the integrated LIS302 accelerometers.

===Top Side===
* 3D Gyroscope ITG-3200
* 3D Magnetometer HMC5883L
* Air pressure/temperature sensor BMP085
* Accelerometer BMA180

==Bottom side==
The Bottom side of the PCB contains optional chips which might be used for different purposes. The FRNBv3 includes:
* TCA6705 7-channel LED controller
* MPR121 touch sensor controller
* M26LR64 I²C EEPROM accessible through RFID (antenna still needed)
* TXS0102 I²C level shifter (to connect additional sensors
* MIC1557 based 38KHz oscillator (for IR-remote control applications)

==Additional features==
The board operates with 3V or 3.3V which is needed for the sensors to work correctly. To be able to connect the board to other devices (for example GTA04, OpenPandora, Always Innovating devices), the I/O voltage can be anything between 1.8V and VCC.
To use the board with the Freerunner, just short the VCC and VCCIO solder points.

All sensors feature a "conversion complete" output which can trigger an interrupt. These signals are now available at small solder points.

=Documentation=
Schematic and board layout files are available from [https://gitorious.org/frnbv3/frnbv3-hardware gitorious] (CadSoft EAGLE 5.x format) or [http://chonyota.net/freerunner/FRNBv3 here]

==I2C Addresss Map==
'''Used I2C addresses'''
{|style="border-collapse: separate; border-spacing: 0; border-width: 1px; border-style: solid; border-color: #000; padding: 0"
|-
!style="border-style: solid; border-width: 0 1px 1px 0"| Address
!style="border-style: solid; border-width: 0 1px 1px 0"| Chip
!style="border-style: solid; border-width: 0 1px 1px 0"| Description
!style="border-style: solid; border-width: 0 1px 1px 0"| Kernel driver
|-
|style="border-style: solid; border-width: 0 1px 0 0"| 0x1e
|style="border-style: solid; border-width: 0 1px" | HMC5883l
|style="border-style: solid; border-width: 0 1px"| Compass
|style="border-style: solid; border-width: 0 1px"| [https://gitorious.org/freerunner-navigation-board/hmc5843 git repository]
|-
|style="border-style: solid; border-width: 0 1px 0 0"| 0x41
|style="border-style: solid; border-width: 0 1px"| BMA180
|style="border-style: solid; border-width: 0 1px"| Accelerometer
|style="border-style: solid; border-width: 0 1px"| [https://gitorious.org/freerunner-navigation-board/bma180 git repository] (first try, help needed)
|-
|style="border-style: solid; border-width: 0 1px 0 0"| 0x45
|style="border-style: solid; border-width: 0 1px"| TCA6507
|style="border-style: solid; border-width: 0 1px"| LED Controller
|style="border-style: solid; border-width: 0 1px"| [https://github.com/thepasto/liquid-chocolate/blob/master/drivers/leds/leds-tca6507.c source file] (untested)
|-
|style="border-style: solid; border-width: 0 1px 0 0"| 0x50
|style="border-style: solid; border-width: 0 1px"| MPR121
|style="border-style: solid; border-width: 0 1px"| Touch Controller
|style="border-style: solid; border-width: 0 1px"| [http://gitorious.org/freerunner-navigation-board/mpr121 git repository] (help needed)
|-
|style="border-style: solid; border-width: 0 1px 0 0"| 0x54
|style="border-style: solid; border-width: 0 1px"| M24LR64
|style="border-style: solid; border-width: 0 1px"| I²C/RFID EEPROM
|style="border-style: solid; border-width: 0 1px"| none yet
|-
|style="border-style: solid; border-width: 0 1px 0 0"| 0x69
|style="border-style: solid; border-width: 0 1px"| ITG3200
|style="border-style: solid; border-width: 0 1px"| Gyroscope
|style="border-style: solid; border-width: 0 1px"| [http://gitorious.org/freerunner-navigation-board/itg3200 git repository]
|-
|style="border-style: solid; border-width: 0 1px 0 0"| 0x77
|style="border-style: solid; border-width: 0 1px"| BMP085
|style="border-style: solid; border-width: 0 1px"| Pressure/Temperature sensor
|style="border-style: solid; border-width: 0 1px"| [http://gitorious.org/freerunner-navigation-board/bmp085 git repository] (also available upstream since 2.6.35)
|}

==Pinout==
[[Image:FRNBv3_front+back+text_small.jpg|thumb]]

'''Standard features'''
{|style="border-collapse: separate; border-spacing: 0; border-width: 1px; border-style: solid; border-color: #000; padding: 0"
|-
!style="border-style: solid; border-width: 0 1px 1px 0"| Pin
!style="border-style: solid; border-width: 0 1px 1px 0"| Description
!style="border-style: solid; border-width: 0 1px 1px 0"| Voltage range
|-
|style="border-style: solid; border-width: 0 1px 0 0"| GND
|style="border-style: solid; border-width: 0 1px"| Ground
|style="border-style: solid; border-width: 0 1px"| 0
|-
|style="border-style: solid; border-width: 0 1px 0 0"| VCC
|style="border-style: solid; border-width: 0 1px" | Supply voltage for sensors.
|style="border-style: solid; border-width: 0 1px"| 3 - 3.6
|-
|style="border-style: solid; border-width: 0 1px 0 0"| VCC I/O
|style="border-style: solid; border-width: 0 1px"| Interface voltage of the I2C bus.
|style="border-style: solid; border-width: 0 1px"| 1.8 - VCC
|-
|style="border-style: solid; border-width: 0 1px 0 0"| SCL
|style="border-style: solid; border-width: 0 1px"| I2C clock line
|style="border-style: solid; border-width: 0 1px"| VCC I/O
|-
|style="border-style: solid; border-width: 0 1px 0 0"| SDA
|style="border-style: solid; border-width: 0 1px"| I2C data line
|style="border-style: solid; border-width: 0 1px"| VCC I/O
|}


'''Level shifter'''
{|style="border-collapse: separate; border-spacing: 0; border-width: 1px; border-style: solid; border-color: #000; padding: 0"
|-
!style="border-style: solid; border-width: 0 1px 1px 0"| Pin
!style="border-style: solid; border-width: 0 1px 1px 0"| Description
!style="border-style: solid; border-width: 0 1px 1px 0"| Voltage range
|-
|style="border-style: solid; border-width: 0 1px 0 0"| VCC/E
|style="border-style: solid; border-width: 0 1px"| Target (external) VCC
|style="border-style: solid; border-width: 0 1px"| VCC - 5.5
|-
|style="border-style: solid; border-width: 0 1px 0 0"| SCL/E
|style="border-style: solid; border-width: 0 1px"| level translated I2C clock line 
|style="border-style: solid; border-width: 0 1px"| VCC/E
|-
|style="border-style: solid; border-width: 0 1px 0 0"| SDA/E
|style="border-style: solid; border-width: 0 1px"| level translated I2C data line
|style="border-style: solid; border-width: 0 1px"| VCC/E
|-
|style="border-style: solid; border-width: 0 1px 0 0"| OE
|style="border-style: solid; border-width: 0 1px"| Output enable: connect to VCC I/O to enable the level shifter
|style="border-style: solid; border-width: 0 1px"| VCC I/O
|}

'''LED Controller'''
TODO

'''RFID EEPROM'''
TODO

'''Touch Controller'''
TODO

'''38kHz Oscillator'''
TODO

==Installation==

===Freerunner===
To connect the FRNBv3 to your Freerunner, follow the instructions for the [[Freerunner Navigation Board v2]] and then short the VCC and VCC I/O pads with a solder blob.

===Other devices===
====with I2C voltage levels below 3.6V====
If you want to connect the FRNBv3 to other devices such as the Open Pandora, you need 3V-3.6V as supply voltage for the sensors. The I2C interface can work with a different, lower voltage level. Lots of devices use 1.8V here. Connect an additional wire to VCC I/O to specify the voltage level of the I2C interface.

====with I2C voltage levels up to 5.5V====

To connect the board I2C busses with higher voltages the integrated level shifter on complete assembled boards comes in handy. Connect the target voltage to VCC/E and the I2C bus lines to SDA/E and SCL/E. Then wire OE to VCC I/O to enable the level translator. Remember that the board still needs a supply voltage between 3V and 3.6V to power the sensors. This can be gained with a simple 3V LDO. Connect the 3V power supply to VCC and short this pad to VCC I/O.

=====Example: connect the board to a graphics card=====
[[Image:FRBNv3VGA.jpg|thumb]]
The [http://en.wikipedia.org/wiki/VGA_connector VGA connector] uses an I2C bus for [http://en.wikipedia.org/wiki/Display_Data_Channel DDC]. Since such a connector is available on most notebooks, it is a good candidate to connect the FRNBv3 to. Luckily the VGA connector also carries 5V which can be used to power the board: a simple LDO will generate the 3V sensor supply voltage. I used the [http://focus.ti.com/docs/prod/folders/print/tps73630.html TPS73630] but any other LDO should be fine too.
Connect Pin 9 (5V) and 10 (GND) to the LDO and its output to VCC and VCC I/O on the FRNBv3. Then connect the I2C bus:

{|style="border-collapse: separate; border-spacing: 0; border-width: 1px; border-style: solid; border-color: #000; padding: 0"
|-
!style="border-style: solid; border-width: 0 1px 1px 0"| VGA connector
!style="border-style: solid; border-width: 0 1px 1px 0"| FRNBv3
|-
|style="border-style: solid; border-width: 0 1px 1px 0"| Pin 9  (+5V DC)
|style="border-style: solid; border-width: 0 1px 1px 0"| VCC/E
|-
|style="border-style: solid; border-width: 0 1px 1px 0"| Pin 10 (GND)
|style="border-style: solid; border-width: 0 1px 1px 0"| GND
|-
|style="border-style: solid; border-width: 0 1px 1px 0"| Pin 12 (SDA)
|style="border-style: solid; border-width: 0 1px 1px 0"| SDA/E
|-
|style="border-style: solid; border-width: 0 1px 1px 0"| Pin 15 (SCL)
|style="border-style: solid; border-width: 0 1px 1px 0"| SCL/E
|}

Finally, use a short wire to connect OE to VCC I/O (both solderpads are on the backside) and you are done.

This also works with [http://en.wikipedia.org/wiki/Digital_Visual_Interface DVI] (Pins 6, 7, 14, 15) and [http://en.wikipedia.org/wiki/HDMI HDMI] (Pins 15-18)!

==Power consumption==
All sensors on the FRNBv3 support powermanagement. The current consumption of each sensor is listed in the table below. These values are taken from the datasheets, the real current consumption could be different. It often increases with higher sample rates.

{| border="1" cellspacing="0" cellpadding="4"
|-
! Sensor !! standby !! active !! remarks
|-
| [http://invensense.com/mems/gyro/documents/PS-ITG-3200-00-01.4.pdf ITG3200] || 5µA || 6500µA||
|-
| [http://www.dsscircuits.com/images/datasheets/HMC5883L.pdf HMC5883L] || 2µA || 100µA || 7.5 Hz
|-
| [http://www.bosch-sensortec.com/content/language1/downloads/BST-BMP085-DS000-05.pdf BMP085] || 0.1µA || 12µA || average current in high resolution mode (default), 1 Hz
|-
| [http://www.sparkfun.com/datasheets/Sensors/Accelerometer/BST-BMA180-DS000-03.pdf BMA180] || 0.5µA || 975µA || "low noise" mode
|}

The power state of each sensor can be controlled through the I2C bus. Most kernel drivers expose a sysfs  file to change it. Integration with the generic linux powermanagement code is planned.

==Issues==
'''Known HW or SW Issues'''
Nothing known yet.

==Software==
====Barom====
This program provides altitude or weather information on Neo Freerunners with bmp085 pressure sensors installed. The bmp085 is available as part of the Freerunner Navigation Board. Source code and binaries can be found [http://jeepingben.net/barom here].

=Availability=
The [http://handheld-linux.com handheld-linux.com] team already takes preorders. You can find it [http://www.handheld-linux.com/wiki.php?page=Navigation%20Board here].

Two assembly options are available:
* Complete: Contains all chips as described above.
* Standard: Top-Side only, contains all sensors relevant for navigation purposes. The compass chip should be a little bit more accurate since a few capacitors on the bottom side are missing. They could distord the magnetic field.

[[Category:Neo FreeRunner reworks and mods]]
