Il '''devirginator''' un è un programma utilizzato in combinazione con [[dfu-util]], [[OpenOCD]] e [[Debug Board]] per ri-programmare da zero il telefono alle impostazioni di fabbrica.

== Codice sorgente ==

Il codice sorgente di devirginator è disponibile qui: http://svn.openmoko.org/trunk/src/host/devirginator/

== Documentazione ==

{{note|Questa deriva da http://svn.openmoko.org/trunk/src/host/devirginator/README rev. 1215 e potrebbe essere obsoleta}}

=== Iniziare ===

Per iniziare,
 % cp config.example config
e apportare le modifiche necessarie. In particolare, configurare SNAPSHOT.
Quindi
 % make
Questo richiede Netpbm e transfig. Infine assicurarsi che openocd sia attivo, accendere il dispositivo, diventare root ed eseguire
 # ./devirginate


=== Prerequisiti ===

Il dispositivo deve essere connesso con:

* JTAG, con un'interfaccia supportata da OpenOCD (necessaria per tutti gli stages)
* USB, connesso al computer su cui è in funzione "devirginate" (richiesto solo per lo stage 2 e successivi)

Inoltre, se una è connessa al dispositivo una console virtuale, l'avanzamento dell'installazione può essere monitorato.

Sono necessari i seguenti programmi:

==== dfu-util ====

* dfu-util deve essere accessibile dalla macchina su cui è attivo "devirginate". Se dfu-util non è nel PATH, selezionare un path specifico in "config".

Per generare dfu-util, eseguire:
 cd $OMDIR/openmoko/trunk/src/host/dfu-util
 ./autogen.sh
 ./configure
 make

==== OpenOCD ====

OpenOCD SVN revision 130 con libftdi 0.8 funziona. Altre combinazioni possono anche funzionare. È richiesta la seguente patch:

http://svn.openmoko.org/developers/werner/openocd-wait-patiently.patch

Per le istruzioni di generazione, consultare http://svn.openmoko.org/developers/werner/notes/openocd

  Se si usa la build di OpenOCD creata da OpenMoko (revisione SVN 1180 o successiva), la patch è già applicata.

==== telnet ====

Oltre a tutto ciò, "devirginate" necessita di telnet.


==== netpbm, transfig, wget, perl ====

"setup.sh" può essere eseguito da un'altra macchina con in condivisione la stessa gerarchia del file system. Necessita di Netpbm, transfig, wget, e Perl.

=== Setup ===

Innanzitutto devirginator deve essere configurato. Questo comprende:

* scaricare i binari per u-boot, kernel, etc.
* generare/convertire diversi files usando il processo di setup

Per il momento la configurazione deve essere fatta all'interno della directory contente tutti i file di devirginator. I file generati durante la configurazione sono posizionati nella directory tmp/. I file in tmp/ sono utilizzati anche durante l'uso di devirginator.

Per iniziare, copiare config.example in "config" e applicare le modifiche necessarie. Quasi tutte le configurazioni necessarie sono già applicate, ma potrebbe essere utile configurare SNAPSHOT con il codice data dello snapshot desiderato.

Quindi, eseguire ./setup.sh o semplicemente make .

setup.sh ora scaricherà i file mancanti ed eseguirà le varie conversioni. Se appare qualche errore durante questo processo, per esempio a causa della mancanza di strumenti o di un errore di configurazione, setup.sh si fermerà con un errore. È possibile quindi correggere l'errore e riprovare. I file già scaricati in tmp/ verranno saltati durante il nuvo tentativo (setup.sh lo farà lo stesso se i file avranno subito dei cambiamenti).

setup.sh inoltre controlla se gli eseguibili sono disponibili durante l'uso di devirginator e segnalerà se manca qualcosa. In generale, è possibile eseguire setup.sh su una macchina diversa rispetto "devirginate", in questo caso questi avvisi saranno ignorati.


=== File ===

==== Script ====
* crc32.pl - Permette la funzione crc32 che comanda la IEEE CRC-32. Questo script è usato da altri script Perl, con "do".

* envedit.pl
* openocdcmd.pl
* scriptify.pl
* setup.sh

==== Configurazione utente ====

===== File di configurazione statici =====

I file seguenti contengono script e altre informazioni di configurazione "statici" che sono usati nel processo di devirgination. Normalmente basta modificare questi file per cambiare le funzioni del processo di configurazione.

Ognuno di questi file è convertito in qualche maniera da setup.sh. Qui sotto dopo la freccia sono indicati i rispettivi file risultanti.

* openocd.in -> tmp/script.ocd

Comandi da eseguire da OpenOCD durante lo stage 0. Per eseguire l'espansione di una variabile, ogni riga di questo file è processata dalla shell con "echo $line". A causa di questo deve essere evitato l'uso di metacaratteri nella shell.

Cambiando qualche indirizzo in openocd.in, è necessario effettuare l'aggiornamento di u-boot.in.

*  u-boot.in -> tmp/u-boot.out

Comandi da eseguire in u-boot durante lo stage 0. Questo file è convertito in un'immagine interpretabile da u-boot e quindi eseguita dalla memoria con il comando di u-boot "autoscr".

* environment.in -> tmp/environment

Configurazioni per l'ambiente u-boot. Notare che i cambiamenti in questo file sono fatti al di sopra dell'ambiente interim prodotto nello stage 0. In particolare, la variabile "mtdparts" è mantenuta da questo stage.

Le righe lunghe possono essere divise nell'ambiente semplicemente tramite rientro della continuazione. Notare che la nuova riga e il rientro sono sostituiti da uno spazio. Esempio,
<pre>
foo=qualche
    cosa
</pre>
rendi  foo=qualche cosa

* smiley.fig -> tmp/smiley.gz
Lo splash screen dello stage 0, un faccia sorridente su sfondo verde.

==== Download cache ====


* tmp/System_boot.png -> tmp/splash.gz
Questa è una copia del logo OpenMoko, che verrà convertito in
un'immagine gzip-ed raw framebuffer.

* tmp/openmoko-devel-image-*.rootfs.jffs2
* tmp/lowlevel_foo-*.bin
* tmp/u-boot-*.bin
* tmp/uImage-*.bin

* tmp/env.old
* tmp/env.new
* tmp/preboot_override
* tmp/preboot_override.noscrub
* tmp/preboot_override.scrub

==== Script ====

I primi messaggi saranno qualcosa di simile a questo:
<pre>
Open On-Chip Debugger
> script /home/moko/om/trunk/src/host/devirginator/tmp/script.ocd
reset halt
wait_halt
waiting for target halted...
Target 0 halted
target halted in ARM state due to debug request, current mode: Supervisor
cpsr: 0x400000d3 pc: 0x00000000
[...]
</pre>
E' importante "pc: 0x00000000". Se il numero è differente, ad esempio
qualcosa del tipo "pc: 0xffffffed", il dispositivo probabilmente non
è acceso. In questo caso puoi provare a farlo ripartire, o se openocd
è bloccato,

* chiudi openocd
* togli e reinserisci il connettore USB nel JTAGkey o nel debug v2 board
* apri openocd

=== Stage ===

Il processo di setup è diviso in tre stage (oltre ad uno speciale stage
zero, vedi più avnti). Ogni stage lascia il dispositivo in uno stato
stabile. Un processo di installazione può includere uttti o solo alcuni
degli stage. Ogni stage richiede il completamento di tutti i precedenti.

* Stage 1: cancella tutti i precedenti contenuti NAND, installa u-boot, e rende il dispositivo pronto a ricevere ulteriori updates da DFU.
* Stage 2: installa Linux ed il file sistem root.
* Stage 3: Da definire.

Nota che probabilmente dovrai avere privilegi per alcune delle operazioni USB che
sono eseguite da "devirginate". Per questo motivo esegui tutto come "root".

Per effettuare tutti gli stage, esegui
 # ./devirginate
dalla directory trunk/src/host/devirginator/

Per eseguire solo singoli stage, specifica il numero dello stage, con il prefisso "-",
ad esempio,
 # ./devirginate -1


==== Stage 0 ====

Se la tabella dei bad block NAND è invalida, può essere cancellata all'inzio
dello stage 1. Questo è chiamato "stage 0".

Non è un'opzione ideale, perchè se l'ultimo blocco NAND è corrotto,
queste informazioni andranno perse.
Di default, lo stage 0 non viene eseguito.

==== Stage 1 ====

Subito dopo l'accensione, lo schermo si accenderà mostrando cose a caso.
Questo indica che il processo di setup è iniziato. Nota che il contenuto
dello schermo può cambiare ("decay") durante il processo.
Ma questo è normale.

Dopo 10-30 secondi, lo schermo diventerà nero. Questo indica che ora
u-boot sta venendo eseguito nel dispositivo.

Dopo 60-90 secondi, lo schermo si accenderà di nuovo e mostrerà una
faccia sorridente su uno sfondo verde. Questo indica che il primo stage
è stato completato. La faccia sorridente apparirà ogni volta che
attiverai il dispositivo.

Il dispositivo ora contiene:
* una bad block table (BBT)
* u-boot, con capacità DFU
* un set base di variabili d'ambiente u-boot
* lo splash screen interim

Ciò che ancora manca è:
* il kernel Linux
* il file system root
* l'ambiente finale
* lo splash screen finale

==== Stage 2 ====

Per iniziare lo stage 2, attiva il dispositivo. Vedrai lo smiley dello
stage 1.

La fase 2 può durare alcuni minuti. Il progresso della proedura di
download è indicata dal simbolo hash (#) nel terminale dove è in
funzione "devirginate".

Alla fine della fase 2, il dispositivo farà un reset, mostrando un
parziale splash screen OpeMoko, quindi farà reset di nuovo, mostrando
il corretto splash screen ed infine ci sarà il boot di Linux.

==== Stage 3 ====
Da definirsi.
{{Languages|Devirginator}}

[[Category:System Developers]]
[[Category:Guides]]
