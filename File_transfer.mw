The Openmoko hardware and software offer several ways to transfer files to and from the system.

== SCP ==

Examples use the IP address of the default USB network setup on Om 2008.8. If you use a different connection, for example Wifi, use the Wifi IP address of the phone.

copy a file from Openmoko smartphone to to PC type this on your PC:

 scp root@192.168.0.202:/full/path/to/filename .

from phone's /home/root you can use shorter format:

 scp root@192.168.0.202:filename .

to copy file to the SD card in phone type this on your PC:

 scp filename root@192.168.0.202:/media/card/

to recursively copy a directory to the phone, use -r:

 scp -r somedirectory root@192.168.0.202:

For convenience, add this to your <tt>~/.ssh/config</tt>

 Host: 192.168.0.202
 	User: root

== SSHFS ==

You can use sshfs to mount directories on your Openmoko smartphone into directories on your desktop computer. Sshfs uses and fuse, so you need to have access to <tt>/dev/fuse</tt> by adding yourself to the <tt>fuse</tt> group.

This <tt>Makefile</tt> makes it very easy to mount and umount sshfs.

<pre>
# Usage: set the three vars here and then type 
# make moko
# that will create "moko" in the current dir and mount the specified path
# You need sshfs installed and your user added to "fuse" group on your PC.
moko_h=root@192.168.0.202
moko_p=/
mokocard_h=$(moko_h)
mokocard_p=/media/card
#remote_h=example.org     # host or ip
# to specify a user, add $USER@ or add appropriate line in ~/.ssh/config
#remote_p=/path/to/mount  # uses home if left empty

%:
	mkdir -p $(PWD)/$*
	sshfs -C -o reconnect -o idmap=user $($*_h):$($*_p) $(PWD)/$* || rmdir $(PWD)/$*

# makes symlinks appear as real files/dirs, can be useful sometimes
%_:
	mkdir -p $(PWD)/$*
	sshfs -C -o reconnect -o idmap=user -o follow_symlinks $($*_h):$($*_p) $(PWD)/$* || rmdir $(PWD)/$*

# "make moko-" unmounts
%-:
	-fusermount -u $(PWD)/$*
	rmdir $(PWD)/$*
</pre>
:Originally created by [[User:Zash|Zash]] for convenient web server access.

Type <tt>make moko</tt> to mount and <tt>make moko-</tt> to umount, once you have [[USB_Networking]] set up.

== TFTP ==
client ('tftp')

server?

== NFS ==
client (on Neo: 'mount -t nfs ...' or edit /etc/fstab and '/etc/init.d/mountnfs.sh start')

server?

== HTTP ==
client (on Neo: 'wget',web browser)

== MicroSD ==
It is possible to write data to micro SD on a desktop machine with the suitable writer and then have it accessible from inside the Openmoko after the card is inserted into that device. To get this working, the micro SD must be formatted in some filesystem that both Openmoko and host understand (ext2, for instance). 

The problem with this approach is that micro SD is difficult to access in the Neo. Both  battery and even SIM card must be removed to reach it.

== SFTP ==
SFTP can be an excellent way to transfer files as it is supported by many possible clients on the desktop machine. After USB network is set up, it is possible to try to open sftp connection by entering sftp://192.168.0.202 or sftp://{username}:{password}@192.168.0.202  into the address bar of the browser that supports sftp.

You can also use the sftp console client under Linux or something like psftp.exe, the sftp client that goes with PuTTY for Windows.

Name and password is the same as for normal logins (root and no password by default).

== FTP ==
FTP is currently considered insecure. There is no any reason to use FTP, SFTP should be used instead.

== USB Mass Storage ==
The Freerunner can be configured to appear as a USB mass storage device to the desktop.  see [[Using the Neo as a Mass storage device]].

== Common methods not supported ==
*Bluetooth (except via other network methods)

[[Category:Advanced End User]]
