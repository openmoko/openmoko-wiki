== Is this page meant for you? ==

This information is mostly useful for developers and power/curious users. If you are looking for a kernel to flash into your GTA01/GTA02 you might want to grab one from the daily builds (scroll down and you'll find it) or get one that ships with one of the [[Distributions]]. The good thing with daily builds is that the newest might be the better. The bad thing of daily builds might be that you can get a broken kernel. If you feel way too uncomfortable making decisions about which kernel to try first and you are not willing to spend the time finding out which one works for you, then this page is not meant for you and you should be looking for stable [[Distributions]] instead. The distributors make this easier for for you. You might want to scroll down for the for the blessed kennels in the daily builds.

== Introduction ==

Linux kernel developers from the community and [[Openmoko]] Linux kernel developers maintain a working kernel for the [[Freerunner]] (Also known as GTA02) and also for the [[Neo1973]] (Aka GTA01).

Right now there is an ongoing effort to reduce the difference between current Linux 2.6 (mainline) and the kernel in the Openmoko repository and thanks to this work we can run the most recent released version of Linux 2.6.

=== Sister pages ===

# [[Kernel_branches]].

== Sources ==

The sources of the Openmoko Linux kernel live in a GIT repository. With the WEB interface you can peek at the contents of the repository:

http://git.openmoko.org/?p=kernel.git;a=summary

[http://git-scm.com GIT] is a fast version control system suited for the workflow that many kernel developers use. It is specially useful when you need to send patches for a project (who might in turn might need to send them upstream). This is an over-simplification but it gives you the idea in case you did not know.

GIT might seem complicated at first but once you learn to use it you will find many ways to increase your productivity by using it. For completeness in this page we include the GIT commands that you need in order to build a working kernel.

If you are very new to GIT you might want to read [http://git.or.cz/course/ the good manuals that already available].

If you would like to contribute code we also have a page with [[Hints_on_using_GIT_and_stgit]] where we all hope to share some cool tips and tricks that can help you. You do not need to learn stgit in order to send patches to the Kernel Mailing List but we have to tell you that once you know git, stgit will make you more productive when you need to send a few patch at once (patchsets).

=== Branches ===

GIT allow developers to use different [[branches that help speed up development (and even make it possible). You might have noticed we have a few branches if already you visited the WEB interface (http://git.openmoko.org/?p=kernel.git;a=summary).

The ''andy-tracking'' branch is the one where most of the action takes place these days. 

We have [[Kernel_branches|branch policies]] that explain what each branch is for.

=== Daily builds ===

==== Automatic revisions ====

Think of a robot that takes whatever kernels are the most recent in GIT, builds them for you and then makes them available here:

 http://downloads.openmoko.org/distro/experimental/

==== Blessed revisions ====

Another robot but this one only builds the versions picked by our friendly [[OpenEmbedded]] developers. Download from:

 http://downloads.openmoko.org/distro/unstable/

If you understand OpenEmbedded you will get this: Those versions are tied to a specific GIT revision through conf/distro/include/sane-srcrevs.bb.

=== Building the andy-tracking branch ===

Those are the minimum survival commands:

 $ git clone git://git.openmoko.org/git/kernel.git linux-2.6
 $ cd linux-2.6
 $ git-checkout --track -b andy-tracking origin/andy-tracking
 $ mkdir GTA02 
 $ cp ./arch/arm/configs/gta02_moredrivers_defconfig GTA02/.config

Before building this kernel you need install a [http://wiki.openmoko.org/wiki/Toolchain#Downloading_and_installing Toolchain].

 $ ./build GTA02

Once the script finishes you will get two files. The first is ''uImage-GTA02.bin'' and a second file with a longer name but same contents, for instance ''uImage-moredrivers-GTA02_andy-tracking_c16287685cb59f91.bin''. Please use the second file if you publish your kernel in some server or if you talk about it in public (specially in bugs reports) because it will allow others to know what kernel you were trying (in case you don't have local changes).

In order to build the modules you can... TODO: fill.

If you want to update the local copy of the repository so that you get the latest changes, you can type:

 $ git-pull

Before reporting that the new kernel does not build please first check for changes in the configuration file provided by Openmoko.

=== kernel building tips ===

If you are modifying Linux kernel code and building it quite often you really want to be using [http://ccache.samba.org ccache]. It will save you a lot of time.

TODO: submit a patch for the build script that makes ccache use easier.

== Contributing ==

The development resources [[Openmoko]] offers are:

* Git repository: http://git.openmoko.org/?p=kernel.git;a=summary
* [http://lists.openmoko.org/mailman/listinfo/openmoko-kernel Mailing list] ([http://lists.openmoko.org/pipermail/openmoko-kernel/ Online Archive])

We appreciate your contributions. Check the Open Issues at the end of this page to check where we need more help.

If in doubt ask in the mailing list.

== FAQ ==

=== Why does Openmoko cares about sending code upstream instead of (insert your task here)? ===

There are two very different approaches and both of them would be doomed if we stuck all our resources to only one of to them.

The first approach is not to care about upstream kernel development efforts and stick to an old kernel while struggling to make it work, ignoring the fact that it is [http://www.kernel.org upstream] where the people who want to help us improve, maintain and support the code running in our devices hang out.

The second is to care way '''too much''' about upstream to the point that we are not willing to ship a temporal dirty hack that make users happy and able to better use their phones. We cannot afford that kind of purity.

As many things in engineering we have to find a point in the middle that works well -- we will try hard to do it.

=== Who's Andy and why is he sticking his name in the kernel? ===

He takes some credit and most the blame. It is an usual practice that in kernel development some branches are named after the person who is taking care of them. He makes sure that the kernel still builds when Linus and his friends feel like it is time to update the upstream kernel and believe us: it is not as fun as it might sound and it happens often.

Check [[Kernel_branches]] if you care about the details.

=== Kernel developers are not polite! They do not even care to say "Hello" when they reply to my emails! ===

Since this is a very important communication issue we will try to make it clear with a long example and with
less formality.

'''Note:''': This is true for many other developer communities. Specially in open-source environments where most communication tends to happen in public archived mailing lists that might be there for ever and that have to be read by many people.

There is no room for misunderstanding. As a bonus, you can also avoid saying "hello" and you can send very short messages as long as they are complete and enough to express what you need to say. They are reading a lot of text each day (either written by Humans or by computers) -- they in fact spend a lot of time reading text thus they appreciate brief messages.

Think of this email body, it could be perfect for an email you send with a patch:

 By avoiding this call to break_alsa_settings ALSA does not break anymore.
 Tested in a GTA02/rev5.

You are better with this short message than with this one:

 Hello there.
 
 While I was doing research on Animal Psychology at school I noticed my
 GTA02 couldn't reproduce exotic bird sounds.  I undertook the task of trying
 to figure it out and fortunately I could do it. I will not share all the details
 here, but I have to tell you: It was hard. By the way, do you guys use
 Vim or Emacs? Mmm. Anyway, I didn't find anything useful about exotic birds on
 the Linux Kernel (I should be working on that someday) but a very pretty
 girlfriend of mine is an ALSA expert and she led me to the light.
 
 After all the pain I finally noticed that the method break_alsa_settings does
 not have to be called at all! Why in the world would one have to do that?!
 Thus I removed the culprit and guess what? I could reproduce exotic bird sounds
 again (and in fact I could reproduce any other sound).
 
 I baked a patch that I think solves this issue and I really was wondering whether
 you would like to apply it to the kernel.
 
 I will be waiting for your answer.
 
 My best wishes.
 
 PS: I tested in a GTA02/rev5. I wanted to test in a GTA01 as well but I cannot
 find it now. If I do, I'll send you people email later. Cheers.

You can embed small jokes whenever you want as long as they are not that distracting.
If in doubt read the email archives and you'll notice a lot of them are already there. ''grep'' the Linux Kernel for swearwords. You'll find them. You can put nice jokes there also, you just have to write patches and get them accepted :-)

'''We did not have to figure this out'''. Since this is all about kernel development there's a
document for that! Sorry, that's how people are in this area.

If you get the latest kernel sources, you will find a document called Documentation/ManagementStyle.
The relevant portion of the text is:

 ...
 Similarly, don't be too polite or subtle about things. Politeness easily
 ends up going overboard and hiding the problem, and as they say, "On the
 internet, nobody can hear you being subtle". Use a big blunt object to
 hammer the point in, because you can't really depend on people getting
 your point otherwise.
 
 Some humor can help pad both the bluntness and the moralizing.  Going
 overboard to the point of being ridiculous can drive a point home
 without making it painful to the recipient, who just thinks you're being
 silly.  It can thus help get through the personal mental block we all
 have about criticism.
 ...

All these opensource programmers are nicer in real person (if you don't interrupt them
while they are programming). On the internet they might appear to be very rude, but in real
life (whatever it is) things are very different specially over lunch or when sharing a beer.

== Known issues ==

=== Sysfs paths ===

Unfortunately we had to update many sysfs paths (see [[GTA02_sysfs]]) and since we did it the kernel stopped working properly with some distributions. Unless the distribution is abandoned it will likely catch up with the newest kernel soon.

[[FSO]] developers realized that this problem could be prevented from from happening in the future and they decided to code a nice daemon called [http://www.freesmartphone.org/index.php/Implementations/OpenDeviceDaemon odeviced].

== Open Tickets ==

'''Please read [https://docs.openmoko.org/trac/query?status=accepted&status=assigned&status=in_testing&status=new&status=reopened&component=System+Software&order=priority&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component this report]''' if you wish to know what the current issues are.

If you can help us with one of those issues it would be a great way to help us move forward. If in doubt please write to the Openmoko Kernel Mailing List. Let us link some bugs here without overdoing it because trac is better than a normal wiki for this. If we have more than 10 bugs the following lists then we might be doing it wrong.

=== Easy bugs ===

Those are the bugs that active kernel developers believe can be fixed by kernel programmers that might want to join us. Thus they are leaving them unfixed for some reasonable time while they work on the harder bugs.

TODO: list of bugs linking to trac.

=== Normal bugs ===

Those are the bugs that we have not fixed because they might be hard and/or because we have not found the time to fix them. They might end up being Esasy Bugs or Evil bugs. We will use trac for them. Please do not add a list of bugs here.

'''Read this [https://docs.openmoko.org/trac/query?status=accepted&status=assigned&status=in_testing&status=new&status=reopened&component=System+Software&order=priority&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component report]''' to find out more about them.

=== Hard bugs ===

Those are the evil bugs that we haven't fixed either because:

# We do not know how to it in reasonable time
# We do not have a clue about how we can fix them
# Hardware vendor doesn't want to release documentation (some of them do that unfortunately / perhaps breaking promises they made to Openmoko about making things easier for developers)
# More testing is needed (perhaps a hard-to reproduce bug)

Ok, here is the list:

* [https://docs.openmoko.org/trac/ticket/2235 #2235 : Monochrome display on resume]


{{Languages|Kernel}}

[[Category:Kernel]]
[[Category:System Developers]]
[[Category:Application Developer]]
