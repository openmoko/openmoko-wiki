== 目標 ==
本頁內容主要是教您如何將你撰寫的應用程式程式碼 (或者範例程式) 涵蓋到你的rootf。這篇文章屬於綜合性的文章，這篇文章的內容是綜合了[[MokoMakefile]]、[[User:CesarB/Using a local overlay|Using a local overlay]]、[[Building a hello world application|建立Hello World 應用程式]]及[[Create a package from existing sources|自目前的原始碼中建立]]。
因此，你可以看到本篇文章的目地是做一個最通透的介紹，它會為你帶來應用程式的概念。

== 設定Openmoko環境 ==

{| border="1" cellspacing="0" cellpadding="5" 
 |*如果你已經設定好了程式開發環境，那你必須進行的工作就是更新你的Makefile。你可以利用下面的指令進行更新：
<pre>make update-makefile</pre>
|}

本份文件的內容相當的基本，我相當的喜愛[[MokoMakefile]]--它實在是很奇妙的工具。它的發明者目前仍為它進行很多維護的工作。我找不到任何一個不使用它的原因。我把我的Openmoko 開發環境目錄放在 /home/bryce/mokodev/ 目錄下，它目前運做的也相當良好。你也可以使用相同的方式，或者是你可以將它放在任何你喜歡的使用者目錄之下(或者是系統下的任何地方)。

要讓你的環境建置完戶，請依照[[MokoMakefile]]設定它。然而，如果你已經手動建立了一個開發環境，你必須確定你目前所進行的進度，並且繼續接下來的工作。


== 架構設定==
如果你想要設定一個本機的架構，這表示你要進行下列的工作。首先，你必須有你想要在Openmoko平台下開發程式的想法。第二：你必須執行正確的工作，並且你不會做出任何像是將Openmoko套件包含在本身目錄下的蠢事，最後讓它自我覆藝掉，或者，你只暸解到它是一個不良的示範。

如果你並不暸解本機的架構，那就讓我花一點時間來解釋。本機架構指的就是身為程式開發人員，將你的本機檔案放在OE style安裝下，讓你可以能輕鬆的將更新的程式放進你的樹狀目錄下。你可以將你的架構樹(overlay tree)放進bitbake 安裝，這樣就可以在你呼叫bitbake時，它將會在進入OE或者是Openmoko樹時，先行置入。這樣可以讓事情都保持組織完整及運做，並且允許使用[[MokoMakefile]]在你的應用程式中建立/rebuild/。
感謝[[User:CesarB]]針對本頁的付出。


要建立本機架構：

* 建立一個 "本機" 目錄，及它的子目錄，(在你的root moko 目錄下，會出現$OMDIR 指示)

 mkdir local local/conf local/classes local/packages local/packages/images local/packages/tasks -p

* 從openmoko樹狀目錄下複製 <code>site.conf</code> 到<code>local/conf</code>路徑。

 cp build/conf/site.conf local/conf/site.conf

* 編輯你複製檔案的local/conf/site.conf 路徑，並且為bitbake recipes建立一源碼目錄。

{{Note | 我必須編輯 build/conf/site.conf 檔案，以避免 "no provider of build target" 錄誤發生。

我想它會產生一個 '''export BBPATH'''的問題，在接下來的操作中-[[User:Flerchjj|Flerchjj]]}}

將目前的<code>BBFILES</code> 修改為如下內容：
 BBFILES := "${OMDIR}/openembedded/packages/*/*.bb ${OMDIR}/oe/packages/*/*.bb ${OMDIR}/local/packages/*/*.bb"

將<code>BBFILE_COLLECTIONS</code> 這行內容修改為如下內容：
 BBFILE_COLLECTIONS = "upstream local overlay"

加入以下內容：
 BBFILE_PATTERN_overlay = "^${OMDIR}/local/"

加入以下內容：
 BBFILE_PRIORITY_overlay = "20"

<code>BBFILE_PRIORITY</code> 參數必須在檔案中較其它的參數為重要。
should be greater than all the other <code>BBFILE_PRIORITY</code> 。
請確認在名為BBFILE_COLLECTIONS內有BBFILE_PRIORITY_* 及BBFILE_PATTERN_* f。舉個例子來說，你只定義了上列的內容，即會減少 BBFILE_COLLECTIONS 到架構中。

* Change your <code>BBPATH</code> environment variable to add the new tree ''before'' the two others in your <code>setup-env</code> file. Bitbake only seems to use the first site.conf file it finds. <code>setup-env</code> is created by [[MokoMakefile]] automatically and is located in your <code>${OMDIR}</code> directory.

 export BBPATH="${OMDIR}/local:${OMDIR}/build:${OMDIR}/oe:${OMDIR}/openembedded"

== 使用本機架構 ==

=== 變更 conf/ 檔案 ===

要變更 conf/ 中的檔案，只要將檔案複製到架構目錄中(保留目錄結構) 並且編輯它。

=== 變更 classes/ 下的檔案===

要變更classes/，請將檔案複製到架構樹下，並且編輯它。

=== 變更套件 ===

變更套件有點小小的複雜。你必須將它複製起來 (or symlink) 而不是只針對套件複製.bb的檔案，同時也必須複製 ''所有''  <code>require</code>及<code>FILESDIR</code> 目錄。(所有對應到 <code>FILESDIR</code>下的目錄，通常被命名為 ''package''-''version'' 或者是or <code>files</code>)。如果你忘記了他們其中的一個，build 會給你錯誤訊息(either when parsing the recipe in the case of <code>require</code>, or when trying to build in the case of the <code>FILESDIR</code> directories).

=== Adding a new package ===

You can add a new package (or a recipe for a new version of a package) to the overlay tree simply by creating it on the overlay tree.

=== Creating your own images ===

To create you own images we'll use the base openmoko .bb files and modify them to suit. Where you see ''scaredycat'' replace this with something to identify your own images.

edit local/packages/images/scaredycat-openmoko-devel-image.bb and paste this:

<pre>
require scaredycat-openmoko-image.bb

IMAGE_INSTALL += "task-openmoko-debug"

</pre>

then edit local/packages/images/scaredycat-openmoko-image.bb

<pre>
#------------------------------------------------------
# OpenMoko Image Recipe
#------------------------------------------------------

export IMAGE_BASENAME = "${PN}"
export IMAGE_LINGUAS = ""

export IMAGE_INSTALL = "\
  ${MACHINE_TASK_PROVIDER} \
  task-openmoko-linux \
  task-openmoko-net \
  task-openmoko-ui \
  task-openmoko-base \
  task-openmoko-phone \
  task-openmoko-games \
  task-openmoko-pim \
  task-openmoko-scaredycat \
  "

inherit image

LICENSE = MIT

ROOTFS_POSTPROCESS_COMMAND += 'date "+%m%d%H%M%Y" >${IMAGE_ROOTFS}/etc/timestamp'

</pre>


edit local/packages/tasks/task-openmoko-scaredycat.bb - this is where we put the things we want to include in our image, above and beyond the standard image. This example includes '''[http://wiki.openmoko.org/wiki/Scummvm scummvm]''' and '''[http://www.handhelds.org/moin/moin.cgi/kbdd kbdd]'''. If you modify this file, make sure you update the '''PR''' by incrementing the number each time.

<pre>
DESCRIPTION = "OpenMoko: Scaredycat Additions"
SECTION = "openmoko/base"
LICENSE = "original"
PR = "r2"

inherit task

RDEPENDS_task-openmoko-scaredycat = "\
  scummvm \
  kbdd \
"

</pre>

==== Actually building your image ====

To build you image, which will be located with your other images, do the following:

 # cd build ; . ../setup-env ; bitbake scaredycat-openmoko-devel-image

== Your First Application ==

I know that I said I'd have a GDK application in here, however, I'd really like to get this whole course done first and have you guys starting to code instead of just looking at what I've written!

This will be a very simple CLI hello world.

=== Before We Code ===

Like a good coder you want to make sure that you're not just doing things, but that you're doing them the right way! 

Now change directories into your <code>local/packages</code> directory.The following commands expect you'll be in that directory so don't change unless you know what you're doing!

You'll want to make a directory with the name of your application, and a subdirectory called files.
  mkdir myhelloworld myhelloworld/files
Now you'll want to create two files in the <code>files</code> directory
  touch myhelloworld/files/README.txt myhelloworld/files/myhelloworld.c
And finally you'll want to create a bitbake file.
  touch myhelloworld/myhelloworld.bb

Alrighty now all your necessary files are created so lets go over this real quick.
<pre>
$HOME
 +- $OMDIR (contains the official openmoko tree)
 |  +- local/
 |     +- packages/
 |        +- myhelloworld/
 |           +- myhelloworld.bb
 |           +- files/
 |              +- myhelloworld.c
 |              +- README.txt
</pre>

That should be your structure, if it's not you should go and fix it up.
=== Filling the Files ===

So you've got your sample files all laid out now it's time to make them actually do something.

myhelloworld.c
<pre>
#include <stdio.h>

int main(int argc, char** argv)
{
        printf("Ello Poppet!\n");
        return 0;
}
</pre>

README.txt
<pre>
This is a command line application. It prints a simple Hello World! To stdout.
</pre>

myhelloworld.bb
<pre>
DESCRIPTION = "A killer hello world application"
AUTHOR = "Bryce Leo"
HOMEPAGE = ""
SECTION = "console/applications"
PRIORITY = "optional"
LICENSE = "MIT"
#DEPENDS = ""
#RDEPENDS = ""
#RRECOMMENDS = ""
#RCONFLICTS = ""
#SRCDATE = "20070729"
#PV = "0.1"
#PR = "r0"
SRC_URI = "file://myhelloworld.c \
          file://README.txt "

S = "${WORKDIR}/myhelloworld/"

do_compile() {
        ${CC} ${CFLAGS} ${LDFLAGS} ${WORKDIR}/myhelloworld.c -o myhelloworld
}

do_install() {
        install -m 0755 -d ${D}${bindir} ${D}${docdir}/myhelloworld
        install -m 0755 ${S}/myhelloworld ${D}${bindir}
        install -m 0644 ${WORKDIR}/README.txt ${D}${docdir}/myhelloworld
}

</pre>

=== Your First Compilation ===

This is where the [[MokoMakefile]] comes in very very handy. Change to your ${OMDIR} directory, You'll know it by the fact that it is where <code>Makefile</code> resides.
 make build-package-myhelloworld

(make sure you run make openmoko-devel-image at least once before building your own packages)

This should all come back and not return any error messages, The output should end in something similar to
<pre>
NOTE: package myhelloworld-1.0: completed
NOTE: build 200707291926: completed
Build statistics:
  Attempted builds: 1
</pre>

Now that no errors were thrown we are happily done!

== Adding Your Application to the Image ==

So you've had an idea, you've setup the build environment, you've setup your local overlay, you've laid out your application tree, you've put code into those fantastic files of yours and now it compiles.There's only one thing left to do. Add that application to your image.

Now lets go over in words and whys what we're about to do. First we need to make modify the <code>${OMDIR}/build/conf/local.conf</code>. We add in the variable <code>DISTRO_EXTRA_RDEPENDS</code> and set its value to include <code>myhelloworld</code>. If you'd like to include other packages from your own overlay or the OM tree just add them inseparated by spaces. After this gets added as a dependency to build the Distro (in this case OpenMoko). Now we have to re-build the task-base package. This essentially just generates an ipk file that will "Merge machine and distro options to create a basic machine task/package." It pretty much builds a file with a list of packages to be installed that are required for the distro to work correctly. So then you just go through and make <code>openmoko-devel-image, build-qemu, flash-qemu-local,</code> and <code>run-qemu</code>. Then calibrate your stylus, head over to the terminal, and run your application!

=== Modifying Your local.conf ===
Now, go into your build config directory <code>${OMDIR}/build/conf/</code> and now you'll be editing <code>local.conf</code>
Add this line to you <code>local.conf</code>
  DISTRO_EXTRA_RDEPENDS += "myhelloworld"
With this line you can also include other applications from the OE tree. For instance my <code>local.conf</code> looks like this.
<pre>
MACHINE = "fic-gta01"
DISTRO = "openmoko"
BUILD_ARCH = "i686"
SRCDATE_eds-dbus = "now"
DISTRO_EXTRA_RDEPENDS += "lua dillo myhelloworld"
</pre>

Now that you've fixed your <code>local.conf</code> it's time to go through all the necessary tasks to add and re-build you image and have your sweet package included.

=== Building ===
Now come the easy part thanks to [[MokoMakefile]]. 

  make rebuild-package-task-base
  make openmoko-devel-image
  make build-qemu
  make flash-qemu-local

Now all you have to do is run qemu.
  make run-qemu

From here after you calibrate your stylus, you click on the Menu in the top right, click down to terminal, then just run your program.
<pre>
root@fic-gta02:/$ myhelloworld
Ello Poppet!
</pre>

==Adding Python scripts as applications==
This is for adding [[python]] scripts/packages to the image for your own use.
===First steps===
First, you need to modify the <code>local.conf</code> file as described above. You need to modify 
  DISTRO_EXTRA_RDEPENDS += "myhelloworld"
to
  DISTRO_EXTRA_RDEPENDS += "myhelloworld python"

--[[User:Xkr47|xkr47]] 18:21, 11 August 2007 (CEST) Hmm surely the new line should be DISTRO_EXTRA_RDEPENDS += "pyhelloworld python" instead since the package we create below is pyhelloworld..

This is because python is not included by default in the openmoko image. Or you can use <code>python-pygtk2</code> if you wish.

Next, you need to perform these actions from the <code>$OMDIR/local</code> directory.

  mkdir packages/pyhelloworld packages/pyhelloworld/files

  touch packages/pyhelloworld/files/pyhello packages/pyhelloworld/README.txt

  touch packages/pyhelloworld/pyhelloworld.bb

===Filling in the files===
Now, edit <code>packages/pyhelloworld/files/pyhello</code> to contain:
<pre>  
#!/usr/bin/python

print "hello world!"
print "shutting down now. Farewell oh cruel, cruel world!"
</pre>
  
Next up, is editing <code>packages/pyhelloworld/files/README.txt</code> to say:

  This is the most awesome helloworld application ever. Know why? It has SNAKES!

Kidding aside, next is the all important <code> packages/pyhelloworld/pyhelloworld.bb:</code>
<pre>
DESCRIPTION = "A pythonic hello world application"
AUTHOR = "Tyler Laing"
HOMEPAGE = ""
SECTION = "console/applications"
PRIORITY = "optional"
LICENSE = "MIT"
#DEPENDS = ""
#RDEPENDS = ""
#RRECOMMENDS = ""
#RCONFLICTS = ""
#SRCDATE = "20070729"
#PV = "0.1"
#PR = "r0"
SRC_URI = "file://pyhello \
          file://README.txt "

S = "${WORKDIR}/pyhelloworld/"


do_install() {
        install -m 0755 -d ${D}${bindir} ${D}${docdir}/pyhelloworld
        install -m 0755 ${WORKDIR}/pyhello ${D}${bindir}
        install -m 0644 ${WORKDIR}/README.txt ${D}${docdir}/pyhelloworld
}

</pre>

I'll explain each of the parts right here, for future reference.

====Meanings of variables in .bb files====

  $WORKDIR = $OMDIR/local/packages/<application directory>
  $bindir  = $OMDIR/build/tmp/work/armv4t-linux/<application directory>/image/usr/bin
  $docir   = $OMDIR/build/tmp/work/armv4t-linux/<application directory>/image/usr/share/doc
  $D       = $OMDIR/build/

====Final steps====
Complete the last steps as per the above instructions, from the point of altering <code>DISTRO_EXTRA_RDEPENDS</code>.

And you're done!

[[Category:Software]]
[[Category:Applications]]
[[Category:Openmoko]]
[[Category:Guides]]
