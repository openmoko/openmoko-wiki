You need to have [[GSM]] parts already initialized, with modem logged in to the network, for this to work. It is best to test it by doing test call. The GPRS connection is made using the PPP protocol to a server identified by an "APN" at the network operator. 

The program that implements PPP on Linux is pppd, which we need to configure and run to get a connection. When that is working, we can configure pppd to wait until it's needed before it connects, and to disconnect if the connection becomes idle. Further, we can start pppd in the background during the boot process.

== Configuring pppd for manual connections ==

You'll need /etc/ppp/peers/gprs:
<pre>
/dev/ttySAC0 115200
connect /etc/ppp/gprs-connect-chat
crtscts 
lock
hide-password
defaultroute
usepeerdns
disconnect /etc/ppp/gprs-disconnect-chat
holdoff 3
ipcp-accept-local
lcp-echo-failure 8
lcp-echo-interval 3
noauth
noipdefault
novj
novjccomp
replacedefaultroute
persist
lcp-echo-interval 3
lcp-echo-failure 12
</pre>

This options where mentioned before with that strange comment. Mine worked fine for me without those.

<pre>
# very long timeouts (unwise?)
lcp-echo-interval 300
lcp-echo-failure 40000
</pre>

Depending on the APN, you may need password authentication using CHAP or PAP. You can add the following default line for "password-less" connections:

<pre>
# client        server  secret                  IP addresses
*               *       ""                      *
</pre>

For CHAP, lines in /etc/ppp/chap-secrets are used. For PAP, the lines are in /etc/ppp/pap-secrets. The client should match the "user" option in pppd the config file (below). You can use * to mean any here, but the option user "" doesn't mean empty!

For example:

<pre>
# Secrets for authentication using CHAP
# client        server  secret                  IP addresses
"user"         *       "password"                  *  
</pre>

For this you need the following options in /etc/ppp/peers/gprs:

<pre>
# username to use for authentication, should match "client" in /etc/ppp/{chap,pap}-secrets
user "user"
</pre>

And you'll need /etc/ppp/gprs-connect-chat (needs "chmod +x"):

<pre>
#!/bin/sh -e
exec chat -v\
	ABORT BUSY\
	ABORT DELAYED\
	ABORT "NO ANSWER"\
	ABORT "NO DIALTONE"\
	ABORT VOICE\
	ABORT ERROR\
	ABORT RINGING\
	TIMEOUT 3\
	"" ATZ\
	OK-\\k\\k\\k\\d+++ATH-OK ATE1\
	OK AT+CFUN=0\
	OK \dAT+CFUN=1\
	ERROR AT+CPIN\?\
	"+CPIN: READY-AT+CPIN=\"2222\"-OK" AT\
	TIMEOUT 60\
	OK AT+COPS\
	OK AT+CGDCONT=1,\"IP\",\"internet\"\
	OK ATD*99#\
	CONNECT \d\c
</pre>

You will need to adjust the APN name "internet" in at+cgdcont line to match what your network operator provides. See below in the table "Some APN names for reference" for the right settings for your operator.

Also good to have is /etc/ppp/gprs-disconnect-chat (needs "chmod +x"):

<pre>
#!/bin/sh -e
/usr/sbin/chat -v\
	ABORT OK\
	ABORT BUSY\
	ABORT DELAYED\
	ABORT "NO ANSWER"\
	ABORT "NO CARRIER"\
	ABORT "NO DIALTONE"\
	ABORT VOICE\
	ABORT ERROR\
	ABORT RINGING\
	TIMEOUT 12\
	"" \\k\\k\\k\\d+++ATH\
	"NO CARRIER-AT-OK" ""
</pre>

You need a proper /etc/resolv.conf:

<pre>
ln -sf /var/run/resolv.conf /etc
</pre>

If needed put your nameserver for usb-net into /var/run/resolv.conf, not in /etc.

=== Starting pppd ===

Then, after initializing GSM, you should be able to initialize GPRS by `pppd call gprs`. Good luck!

To dial in - and get verbose output on the terminal - use pppd
<pre>
pppd debug nodetach call gprs
</pre>

The config above will establish a 'persist'ant link over gprs. The battery will run low in less than an hour. See an example for an on-demand config below.

=== Some APN names for reference ===

{| border="1"
! Country
! Carrier
! Plan
! APN
! user/password if required
|-
| USA || T-mobile || Anything less than full internet || wap.voicestream.com ||
|- 
| USA || T-mobile || Regular internet plan || internet2.voicestream.com ||
|- 
| USA || T-mobile || "VPN" internet plan || internet3.voicestream.com ||
|- 
| USA || Cingular (AT&T) || Less than full internet || wap.cingular ||
|-
| Finland || Saunalahti || Any || internet.saunalahti ||
|-
| Finland || Sonera   || Any, behind NAT || internet ||
|-
| Finland || Sonera   || Any, public IP  || prointernet ||
|-
| Germany || Vodafone || Any, behind NAT || web.vodafone.de ||
|-
| Germany || T-Mobile ||  || internet.t-mobile ||
|-
| Germany || E-Plus || BASE (and others?) || internet.eplus.de || eplus gprs
|-
| UK || T-Mobile|| || general.t-mobile.uk ||
|-
|}

== Starting pppd automatically ==

Once you have finished debugging your gprs-connect-chat and gprs options files, you may wish to automatically connect whenever needed and hang up when finished.  Make sure you understand the impact of this change to your carrier plan billing.  This is not recommended unless you have a large-use or unlimited data plan.  These scripts do NOT prompt you before connecting.

=== On-demand connection settings ===

Additional settings are needed if you want the actual connection to be up only while there is traffic. In the 'gprs' file above, insert the following, making sure 'nodetach' is commented out.  If 'nodetach' is on, the boot process will stop when it starts pppd. Also remove the option 'persist' mentioned above.

<pre>

# Wait until needed before connecting
demand

# Disconnect if idle for given amount of seconds
idle 20

</pre>

=== Start on boot (method 1) ===

Add the following definition to /etc/network/interfaces:
<pre>
auto ppp0
iface ppp0 inet ppp
        provider gprs
</pre>

That should be it. Now you can use 'ifup ppp0' and 'ifdown ppp0' manually too.

=== Start on boot (method 2) ===

Create the following file as /etc/ppp/ppp_on_boot (needs chmod +x).  The /etc/init.d/ppp script will call it to set up the daemon.
<pre>
#!/bin/sh
#
#   Rename this file to ppp_on_boot and pppd will be fired up as
#   soon as the system comes up, connecting to `provider'.
#
#   If you also make this file executable, and replace the first line
#   with just "#!/bin/sh", the commands below will be executed instead.
#

# The location of the ppp daemon itself (shouldn't need to be changed)
PPPD=/usr/sbin/pppd

# The default provider to connect to
$PPPD call gprs

# Additional connections, which would just use settings from
# /etc/ppp/options.<tty>
#$PPPD ttyS0
#$PPPD ttyS1
#$PPPD ttyS2
#$PPPD ttyS3
</pre>


Finally, you need to add the /etc/init.d/ppp script to the init process by creating symbolic links from the appropriate directories.  I chose the following:

<pre>
/etc/rc0.d/K25ppp
/etc/rc1.d/K45ppp
/etc/rc2.d/S45ppp
/etc/rc3.d/S45ppp
/etc/rc4.d/S45ppp
/etc/rc5.d/S45ppp
/etc/rc6.d/K25ppp
</pre>

== See also ==
* [[Manually using GSM]]
* [[Manually using Bluetooth]]

{{Languages|Manually_using_GPRS}}
[[Category:Documentation]]
[[Category:Developer software]]

[[Category:Guides]]
