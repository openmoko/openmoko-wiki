{{Languages|Flashing_the_Neo_FreeRunner}}
Most of the software on the Neo FreeRunner can be updated or changed. The root filesystem, the [[kernel]], and the [[Bootloader]] can be modified with the program [[dfu-util]] from a computer. This page does not describe flashing the [[NOR Flash]] which requires a [[debug board]]. See [[Flashing NOR]] for this procedure. 

The [[NAND Flash]] is divided into 3 partitions for the bootloader, kernel, and root filesystem. Each component can be flashed separately. 

The '''bootloader''' is a small program that runs first and starts everything else when the FreeRunner is powered on. The bootloader is independent of the distribution you use.
The '''kernel''' and the '''root filesystem''' are provided by the distribution. 

'''Before you start: Erasing the root filesystem or flashing the bootloader are radical measures. Take the time to ponder the necessity. Sometimes problems can be fixed by only updating the kernel.'''

== Software you need ==

=== Tools for flashing: DFU-util and NeoTool ===

Note that there are some issues using dfu-util with sudo.

'''Don't use sudo with dfu-util. Make sure you are root before using dfu-util!'''

''Command-line''. DFU-util, the tool to flash the FreeRunner has to be installed on your computer. It is available for Linux, MacOS X, and Windows (see links below). DFU-util allows you to connect to the FreeRunner through the USB cable and control its bootloader. That connection uses a special protocol which addresses the bootloader's interface, and differs from USB networking. For more details, see the separate [[dfu-util]] page.

''GUI''. Instead of the command-line-based DFU-util, you can use NeoTool, a graphical tool for flashing the FreeRunner: see the [[NeoTool]] page.

'''Linux:''' http://downloads.openmoko.org/distro/releases/Om2008.9/dfu-util

Make sure it is executable by setting the permissions with this command: chmod a+x dfu-util

'''Linux 64-bit:''' You need 64-bit version of dfu-util, which usually can be found in your distribution repository.
If your distribution does not provide 64-bit dfu-util, or it consistently fails with a "-62" error, you have two ways to go:
# Seek for 32-bit machine and do flashing form it.
# Use 32-bit chroot (on amd64 debian). Worked for me --[[User:Bubak|Bubak]] 16:54, 4 September 2008 (UTC).
# Just try the 32-bit dfu-util. Worked fine on my x86_64 Fedora 10 --[[User:Pcfe|pcfe]] 2009-01-16.
#* I can confirm this (Gentoo multilib x86_64) --[[User:Unlotto|Unlotto]] 14:15, 4 February 2009 (UTC)
#* I can confirm this (OpenSuSE 11.0 x86_64) --[[User:muthusuba|muthusuba]] 29 July 2009

'''MacOS X:''' [[MacOS_X#Graphical_Flashing_with_Openmoko_Flasher]]

'''Windows:''' http://projects.openmoko.org/frs/?group_id=166&release_id=162

See additional driver installation instructions for Windows at [[Dfu-util-windows]]

'''Virtual machines''' While there has been some limited success reported using dfu-util from within a Virtual Machine (such as VMware), in general it is not possible to use dfu-util in this fashion.  You must use dfu-util on an operating system that has direct access to the physical USB device hardware.

=== Image files to flash into FreeRunner memory ===

There are separate image files for all 3 software components. In most cases you will need to install a Kernel (uImage) and a Root Filesystem (rootfs). In rare cases, when there is a bug you need fixed, you will also install a new bootloader.

Please read [[Distributions]] for choosing the distribution which fits your needs, and then see [[Download]] for downloading.

== Do a backup ==

If you have a working image that you're happy with but want to try something different, you should probably do a [[Backup]].

== Using dfu-util ==

See [[Manuals/Dfu-util]]



== Flashing the Kernel ==

 Note: The phone needs to be in the U-boot bootup menu for this to work.
       Get there by holding down the aux button while powering up the device.

The command format is:

 # dfu-util -a kernel -R -D ''/path/to/uImage''

When flashing succeeds the following will be shown:

 status(0) = No error condition is present
 Done!

Flashing may fail with an error -110. This indicates that the kernel is too big for the default kernel partition. uboot can be used to change the size of the default partitions on the device. It may also mean that you are trying to put the wrong thing in the kernel space.

== Flashing the Root Filesystem ==

The root filesystem has to be an image in jffs2 format. If the file you downloaded is zipped or compressed (has a .gz, bz2, .zip, tar, tar.gz or .tgz extension) you have to uncompress it first.

The command format is:

<pre>
 # dfu-util -a rootfs -R -D rootfs_filename.jffs2
</pre>
| U-Boot
where ''rootfs_filename.jffs2'' is the name of the file containing the root file system.

The flashing process can take up to 15 minutes for a ~70MB image. It is also wise to make sure that your Neo has enough battery charge prior to flashing.

When flashing succeeds the following will be shown:

<pre>
status(0) = No error condition is present
Done!
</pre>

== Flashing the boot loader to the NAND==

{{Note|In most cases you don't need to flash your bootloader. Flash it only if you want to update for a specific feature or due to a specific problem.}}

The boot loader (U-boot) file should have a .bin extension. As with the root filesystem, if the file you downloaded is zipped or compressed (has a .gz or .zip extension) you have to uncompress it first.

The command format is:

 # dfu-util -a u-boot -R -D ''uboot.bin''

where ''uboot.bin'' is the name of the boot loader binary image file.

=== Optional: Verifying boot-loader version ===

<!-- The following should probably be moved to [[Bootloader_versions]], IMHO -->

<!-- Taken from posts by Mikael Berthe <mikael.berthe@lilotux.net> and Torfinn Ingolfsen <tingox@gmail.com> to Support list, subject: Re: Upgrading u-boot needed ? -->
(Optional) After an upgrade, you may wish to check that the u-boot version matches the one you have just flashed. You can use 'grep  Bootloader /dev/mtdblock1' from a shell on the FreeRunner (and possibly the 1973 as well) to get the '''NAND''' u-boot version, like this:
   root@om-gta02:~# grep Bootloader /dev/mtdblock1
   Neo1973 Bootloader U-Boot 1.3.2+gitr18+64eb10cab8055084ae25ea4e73b66dd03cc1a0cb

You can grep for the same string in /dev/mtdblock0 to retrieve the '''NOR''' u-boot version:
   root@om-gta02:~# grep  Bootloader /dev/mtdblock0
   Neo1973 Bootloader U-Boot 1.3.2-moko12

<!-- ENDS ... subject: Re: Upgrading u-boot needed ? -->

== A command line script to simplify dfu-util ==

DFUScript developed to assist users who have multiple devices in using dfu-util via the command line. Information on where to download and use DFUScript can be found on [[DFUScript]]

== Alternative: using nandwrite ==

This approach involves writing the '''rootfs''' into nand directly on the phone from a system already running on it, not necessarily via usb from a computer.

If you have a system running from a different partition that you intend to flash (for example sd card), you can use nandwrite to do the work, which is much faster (it takes about 30s to write a 59MB jffs2 image).

Make sure you have nandwrite installed (on gentoo, it's in sys-fs/mtd-utils package)

Also make sure that the host system has received correct partition list, for example for my stock Neo Freerunner partition list:

<pre>
#cat /proc/mtd
dev:    size   erasesize  name
mtd0: 00200000 00010000 "physmap-flash.0"
mtd1: 00040000 00020000 "u-boot"
mtd2: 00040000 00020000 "u-boot_env"
mtd3: 00800000 00020000 "kernel"
mtd4: 000a0000 00020000 "splash"
mtd5: 00040000 00020000 "factory"
mtd6: 0f6a0000 00020000 "rootfs"
</pre>

In this case, we're looking for ''rootfs'' which according to above is mtd6. If you have it somewhere else, substitute mtd6 with whatever you have in the remainder of this section.

'''Beware of flashing the ''u-boot'' partition, probably you'll have to recreate mtdparts configuration for u-boot from [[U-boot#Using_usbtty_from_Linux|u-boot console]]. Probably this is due to some kind of bug in nandwrite.'''

<pre>
dynpart
dynenv set u-boot_env
</pre>

You can test your nand for bad blocks by issuing '''nandtest /dev/mtd6''' '''(this is a data destructive test !)'''

First, put your .jffs2 file somewhere the phone system can read it

Second, write the desired image into the nand this way:
<pre>
flash_eraseall /dev/mtd6
nandwrite -p /dev/mtd6 /path/to/image.jffs2
</pre>

* The -m flag can be used to tell nandwrite to mark blocks it detects bad as bad, so if nandwrite is bugged, your entire partition will be marked as bad. See [[NAND_bad_blocks#Clearing_BadBlocks]] if this happened to you.

You're all done!

== Troubleshooting ==

Okay, so you just reflashed. The splash screen pops up, but uBoot fail to load the kernel, and return to boot menu. WTF?

* It is likely that the wrong bits went to the wrong place. Try reflashing just the kernel, double checking that you select the uImage.bin kernel file, not the u-boot.bin bootloader file.
* Try redownloading and reflashing the kernel, checking file integrity with the MD5 hash sums.

==See also==
*[http://www.denx.de/wiki/U-Boot/WebHome U-Boot home page]

[[Category:Flashing Openmoko| ]]
