{{Languages|Android on Freerunner}}
== Android on Freerunner ==
Google has released their open source version of the Android phone software distribution. In order to use it on the Freerunner, a number of patches need to be applied and a compiler with armv4 java exception support needs to be used to compile the software.

== Compiler suite ==

Android is a little picky about the version of gcc compiler. It also requires some java exception support that isn't available for armv4 without a minor modification. The following tools are what I use to build Android:


=== Binutils 2.18 ===

At one time I had some armv5t code that was compiled into Android which would cause the linker to generate these blx instructions which fail on armv4. I'm not sure if this is still necessary, but I still have the following change applied to binutils:

<pre>
diff -urN binutils-2.18-orig/bfd/elf32-arm.c binutils-2.18/bfd/elf32-arm.c
--- binutils-2.18-orig/bfd/elf32-arm.c	2007-08-07 02:59:23.000000000 +0700
+++ binutils-2.18/bfd/elf32-arm.c	2008-03-15 11:30:17.000000000 +0700
@@ -3093,8 +3093,8 @@
 static void check_use_blx(struct elf32_arm_link_hash_table *globals)
 {
   if (bfd_elf_get_obj_attr_int (globals->obfd, OBJ_ATTR_PROC,
-				Tag_CPU_arch) > 2)
-    globals->use_blx = 1;
+				Tag_CPU_arch) >= TAG_CPU_ARCH_V5T)
+    globals->use_blx = 0;
 }
 
 bfd_boolean
</pre>


configure --prefix={devel path}/android/cross --target=arm-eabi

=== gcc 4.2.4 with gcc41-java-arm4.patch ===


configure   --prefix={devel path}/android/cross --target=arm-eabi --with-arch=armv4t --enable-shared --enable-threads --disable-nls --disable-libmudflap --enable-target-optspace --with-abi=aapcs --enable-multilib --disable-libssp --disable-libstdcxx --enable-languages=c,c++

=== java-6-sun ===

This is the standard Linux package available for most (all?) distributions.

== Patches ==

Coming soon. I've posted a number of them on the devel mailing list so far. Eventually, I expect to provide everything necessary for people to build Android for themselves.

== Android on internal flash ==

=== Images ===

To use the Kernel you have to either :

* adjust your [[Uboot]] environment to support a Kernel of more then 2 MB 
* change to the [[Qi]] Bootloader. It supports 2MB kernels out of the box.

I have placed an older 2.6.26 kernel with Android support at:

    [http://people.openmoko.org/sean_mcneil/uImage-android uImage-android]

I have put up a jffs2 image that replaces rootfs on the Freerunner at:

   [http://people.openmoko.org/sean_mcneil/androidfs.jffs2 androidfs.jffs2]

=== Installation on internal flash ===

As noted above, this installation requires you to wipe out the existing kernel and rootfs in NAND on your Freerunner. You also must have an SDCARD and it needs to be configured with two (2) primary partitions: First is VFAT/MSDOS (16 or 32) which acts as the /sdcard storage area for pictures, movies, music, etc. and the Second is an ext3 primary partition for use of internal Android /data area to store settings, caches, etc.

The first thing I suggest is to setup an SDCARD. You can flash the NAND first, but you must have an SDCARD with two partitions as stated before you'll be able to boot. I use a 2GB card which I have split in half. fdisk shows me:

    /dev/mmcblk0p1               1        2454      996310    6  FAT16<br>
    /dev/mmcblk0p2            2455        4908      996324   83  Linux

formatted as

    sudo mkfs.vfat /dev/mmcblk0p1<br>
    sudo mkfs.ext3 /dev/mmcblk0p2

There is no need to populate the ext3 partition at all. The VFAT partition can be populated with media content if you so desire.

With your SDCARD all set, you are ready to flash the kernel and rootfs:

    sudo {path_to}/dfu-util -d 0x1d50:0x5119 -a kernel -D uImage-android<br>
    sudo {path_to}/dfu-util -d 0x1d50:0x5119 -a rootfs -D androidfs.jffs2<br>



== Android on SDcard ==

Some notes about booting android from sdcard : 

=== Setup ===

* Build android from source. See [http://trac.koolu.org/ koolu website] for directions.
* Use the first script in [http://lists.openmoko.org/pipermail/community/2008-December/036982.html this mail] (adapt to your filesystem) to stage your android install.
* copy the contents of this directory on a ext3 partition on your sdcard.
* add a /boot directory on your sdcard.
* copy the uImage-android kernel (see above) and copy it inside your /boot with the exact name '''uImage-GTA02.bin'''
* I changed the init.rc (in your root on the sd) to remove mounts that could be problematic (/data for example) :
<pre>
--- filesystem/root/init.rc	2008-12-15 17:51:14.000000000 +0100
+++ phyce.init.rc	2008-12-19 15:56:25.000000000 +0100
@@ -24,7 +24,7 @@
     mkdir /sqlite_stmt_journals 01777 root root
     mount tmpfs tmpfs /sqlite_stmt_journals size=4m
 
-    mount rootfs rootfs / ro remount
+    mount rootfs rootfs / rw remount
 
     write /proc/sys/kernel/panic_on_oops 1
     write /proc/sys/kernel/hung_task_timeout_secs 0
@@ -38,14 +38,14 @@
 #    mount yaffs2 mtd@system /system ro remount
 
     # We chown/chmod /data again so because mount is run as root + defaults
-    mount ext3 /dev/block/mmcblk0p2 /data nosuid nodev
-    chown system system /data
-    chmod 0771 /data
+#    mount ext3 /dev/block/mmcblk0p2 /data nosuid nodev
+#    chown system system /data
+#    chmod 0771 /data
 
     # Same reason as /data above
-    mount yaffs2 mtd@cache /cache nosuid nodev
-    chown system cache /cache
-    chmod 0770 /cache
+#    mount yaffs2 mtd@cache /cache nosuid nodev
+#    chown system cache /cache
+#    chmod 0770 /cache
</pre>

* Install [[Qi]] on you NAND flash. You can still boot whatever distro you've got on internal flash using the NOR bootloader. You should try the magic file in /boot to show kernel messages.
* boot the GTA02, and pray.

=== Status ===

Android boots and graphic UI appears (hurray) !

Not very functional, though.


[[User:Phyce|Phyce]] 14:07, 31 December 2008 (UTC)

== Android Debug Bridge ==

To assist in debugging and to gain shell access to the phone with Android, you can use

   [http://people.openmoko.org/sean_mcneil/adb adb]

You should be able to connect to the phone as long as you start it up with the USB connected to your host. I don't think it will work if you plug it in after starting. Of course, you need to setup [[USB_Networking]] (<tt>ifconfig usb0</tt> ...) on your host before connecting.

Some helpful commands are:

    ADBHOST=192.168.0.202 ./adb logcat           - like a tail -f of the android log
    ADBHOST=192.168.0.202 ./adb logcat -b radio  - same as above for the radio logs
    ADBHOST=192.168.0.202 ./adb shell            - bring up a command shell to the phone
    ADBHOST=192.168.0.202 ./adb kill-server      - kill the background server on the host

Sometimes, adb gets stuck: if you cannot to the device run "adb kill-server" before trying other commands.

== Known Issues ==

This version of the linux kernel will not successfully wake from suspend mode. Your battery life will be significantly lowered because of this and the phone will lock up unless you setup the phones screen timeout to never.

This version of the kernel also uses a keypad hack. The buttons layout is as follows:

    Aux left-hand upper button is the "back" key.
    Power button is:
        menu button when pushed quickly,
        end button when held for more than a second and released,
        power-off if held for 10 seconds.
[[category|Distribution]]
[[Category:Flashing Openmoko]]
