*AFAIK, you should be able to achieve the equivalent of a 3-axis accelerometer and a gyro by using three two-axis ones, and some software...
** To tell which way the phone is spun, you need three gyros (to measure spin around the long axes and around the USB plug, and around an axes in and out of the screen). To tell which way the phone is accelerating, you need 3 accelerometers - this is a total of 6 independent variables.
**You can't quite derive all 6 from 3 2-axis accelerometers, as apart from geometric problems (you tend to end up with axes that coincide) the sensitivity for rotation in some axes really quite sucks. (consider the size of the gravity vector, and consider the noise of the accelerometers).
**Having said this, there is a big trade off between 'good enough' and cost. With smart software, it may be possible to get useful function without having to have the full optimal set of hardware that would make the function perfect.

An example of an accelerometer that might be used is the one in the Wiimote, as documented in [http://www.wiili.org/index.php/Motion_analysis this page] .
[http://www.analog.com/en/prod/0%2C2877%2CADXL330%2C00.html This page] gives the sensitivity of the accelerometer as around 300ug/sqrt(Hz).

This is almost useless unfortunately.
Though it implies - given adequate filtering - that you can get a position of a meter or better over 24 hours, the very high temperature sensitivity means that even stabilising the temperature to .1C, you get a bias of up to 1mm/s^2, or 100m/s after a day, or 8600Km. (1Km in around half an hour)
In real use, in a phone, without a little oven to keep the temperature stable, 3cm/s^2 or so is probably achievable, or 1Km uncertainty in around 3 minutes.

'''References'''

* [http://www.freescale.com/webapp/sps/site/overview.jsp?nodeId=0112690EFA4082&tid=tshbMERC Freescale products]
* [http://www.freescale.com/files/sensors/doc/app_note/AN3107.pdf Measuring Tilt with low-g accelerometers (Freescale doc)]*

* [http://www.analog.com/en/cat/0,2878,764,00.html Analog Devices  MEMS and Sensors]
* [http://www.analog.com/en/prod/0,2877,ADXL330,00.html Analog Devices  ADXL330]

* [http://www.st.com/stonline/products/literature/ds/12094/lis3lv02dl.pdf ST Inertial Sensor]*


Finish and edit in - copy of ML post.
> If your tracking movement with 2 3D accelerometers... What would another
> one provide.
<snip>
> I mean  if we know the rest orientation and then suddenly get pointed at
> something it would seem like the 3d vectors will show a specific values
> and directions for the 2 ends of the phone depending on the center of
> the arc or movement that acted on the phone.
> 
> I would say that we can get yaw, pitch and roll just fine.. But again, I
> am no expert.
>
You can't get all of these. You certainly cannot do decent inertial navigation.

This discusses the possibilities of two 3-axis accelerometers.
Actual neo-based conclusions, and what you don't need two for.

What can be done with absolutely perfect devices?

Imagine two three axis accellerometers rigidly placed on each end of an arrow.

How much information do you get out of these?

A few moments thought should reveal that the orientation of the sensors does not matter. You can resolve the three signals into one vector and magnitude.
This does not change however the devices are oriented - there is no benefit in for example skewing one 45 degrees.

Considering the case in deep-space - the maths are simpler.
(not a common use-case, but simpler to analyse)
Holding the orientation steady, you can do perfect inertial navigation, and determine exactly where you are at all times. (in a flat space-time, but meh)

What happens when we vary the orientation?
Well - it's obvious that you can subtract any common accelleration that's measured by both sensors - this does not change the orientation.

Remembering that we can skew the sensors against each other, and this has no effect, let's specify that they are oriented with X and Y lined up, and Z pointing in the direction of the arrow.
This reveals a problem.

Spin the arrow on its axis, and none of the accelererometers measure anything at all - they do not move, so they do not accelerate.
(you can't get round this by moving them off-axis, as you can draw an imaginary arrow between the two accelerometers which has the same problem)

Spin the arrow around its centre (it must spin around its centre logically if you've subtracted the overall acceleration) you can pick up pitch and yaw.

Now, what if we add gravity in?

With perfect accelerometers again, with Z axes pointing to the arrow tip.
As long as the Z axes does not point in the same direction as gravity + current acceleration, then you can determine roll, pitch, yaw, and XYZ acceleration.
If the Z axes does point to the acceleration vector, then you lose track of roll.
In theory - with perfect accelerometers, this does not matter.
Because you can never line it up perfectly.
In practice, with real ones, it gets more complex.
Roll signal/noise will drop as the acceleration vector closes on the Z axes, and be useless once it gets within the noise.


I suppose I'd better back this up with numbers.
I'm assuming specs similar to the ADXL330 - simplified a little.

Assumptions:
The Neo is a rigid object, and the accelerometers are rigidly fixed to it.
The A/D has no noise.
The accellerometer is perfect, other than a noise of 300uG/sqrt(Hz), and a temperature sensitivity of +-.1mG/C.
I'm neglecting cross-axis sensitivity - which will need calibrated out, and non-linearity.

For interactive use.
High-pass filtering the accelerometer with a bandwidth of 10Hz - you can't filter it much more than that or you lose important 'wobbles', because you need to integrate them to come up with a position - leads to a noise floor of 300uG/sqrt(Hz) *sqrt(10Hz) = 1mG. (RMS (No, not that RMS))

Neglecting roll for the moment.

1mG is an accelleration of 1cm/s^2.

If the accelerometers are spaced 10cm apart, then the radius between each and the center is 5cm, meaning the circumference of the circle is 30cm.
Integrating over 1s, noise is around 3cm/s^2.

After 1s, if you happen to hit an average noise peak in each accellerometer at the opposite point - something that'll happen once every 5-10 seconds or so, (absolute peaks are much worse) what happens to the pointing?

Well - the velocity reads out as 6cm/s^2 wrong, which means that the position is now out by 3cm, or 10 degrees.

What does this mean though?
Well, if we are more or less stationary, we have 'down' very accurately.
But that's almost all we have.

Without roll, you cannot tell pointing.
However, in the best case - phone on its back, accelleration vector down, and turning in a vehicle, you may be able to tell sharp turns, not much more.

Because the differential accelerations are so small, and comparable to the noise floor for gentle turning and twisting, there are basically two ways that they can be useful.

When more or less stationary:
Picking up turning about the gravity axis - if you are looking at the phone with it in front of you at chest level, with accelerometers at top and bottom for example, this will let you pick up sharp rotations of the phone around the vertical axis - keeping the angle the screen keeps with the floor constant. But they have to be sharp. It will probably not be good enough for keeping a map aligned when you turn round in place, for example. It may be adequate for some games, but again, the movements have to be sharp, it will false signal as you decrease the wanted signal.

When in motion:
It may be adequate to improve positioning of the GPS, when sharply going round corners, or doing high-G aerobatics. It can fill in _short_ - 3-5s gaps in GPS coverage. 

And this is completely neglecting the temperature sensitivity.

What it can't do.
Inertial navigation over more than several seconds.

What one accelerometer alone can do.

If the orientation of the phone is held constant - for example, clamped into a car holder, then you can make pretty good guesses about the correlation of aceleration and position.
For example, in normal driving, the ground track of the car is some function of the position of the steering wheel. Any lateral accellerations against the current known course mean that the steering wheel has been applied, and the car is turning at a rate which can be computed by calculating it with the cars known speed.
Any accellerations in line with the course mean that the car is slowing up or down, and any vertical accelerations mean that the car is going up or down a hill.

Of course - the errors build up, but it's not bad for short periods.
For example, 1cm/s^2 of error, with a car going in a straight line at 20m/s, takes a bit over a minute to move from a true direction of northeast - say, to a false direction of northnortheast. (the position is off after this period by a hundred metres or two)
I should add more figures to this, but it's late.
It's going up on http://wiki.openmoko.org/wiki/Accelerometer_Fundamentals in an unedited form, and I'll add more to it later. If you have any queries about how I've come to any particular conclusion, please put it on the discussion page of that page, and I'll flesh it out.
