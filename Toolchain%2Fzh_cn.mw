{{Languages|Toolchain}}
= 简介 =

工具链是一组用来编译代码的工具集，Openmoko有两类不同用途的工具链。

== 基本工具链：用于开发简单的单一应用程序 ==

为了开发简单的单一应用程序，你可以使用针对Openmoko项目预先构建好的工具链。本文将说明这一工具链的使用方法，它将帮助你一步步的编译项目并最终运行在目标设备上。你应该听过[[OpenEmbedded]]，但作为开发此类应用程序的开发人员，你’’’不’’’应该使用[[OpenEmbedded]]。

== [[OpenEmbedded]]:用于系统集成和定制发行版 ==

针对系统集成和定制发行版的任务，你应该使用[[OpenEmbedded]]，它能通过bootstrapping/build流程建立起自己的交叉编译工具链。系统集成和定制发行版未在本文加以讨论。

=基本工具链的用法=

==基本安装条件==
熟悉Linux及其命令行工具是最基本的，你必须有一台x86兼容的、最少有1G磁盘空间的电脑。你也必须要有使用本地编译器来编译程序源码的相关操作经验。同时，假设你有home目录(~)和/usr/local/目录(有需要时，需使用root用户来操作)的写权限。如果你没有上述的权限，请与管理员联系。

你至少应该具有使用安装程序的权限，允许你使用自动工具构建软件包。(比如'''./configure, make, make install''')。

需要安装的部分软件如下：
* 针对大多数Linux发行版，需要安装如下软件包：
** autoconf, automake
** binutils, gcc, gcc-c++
** libtool
** ccache
** intltool

* 针对 ubuntu (7.10) ，需要安装以下软件包：
 sudo apt-get install gcc g++ autoconf automake binutils libtool libglib2.0-dev ccache libxrender-dev intltool

==下载及安装==

预构建的工具链可以从 [[http://downloads.openmoko.org/toolchains downloads.openmoko.org]]下载：

* 在计算机中的任一位置建立目标文件夹，但推荐建立下述文件夹：
  mkdir ~/sources
  cd ~/sources

* 下载与计算机CPU类型(x86_64或i686)匹配的软件包：

  wget http://downloads.openmoko.org/toolchains/openmoko-x86_64-arm-linux-gnueabi-toolchain.tar.bz2
 or
  wget http://downloads.openmoko.org/toolchains/openmoko-i686-arm-linux-gnueabi-toolchain.tar.bz2


接着，要将它解压缩到文件系统。注意：此软件包必须安装到且会自动安装到<tt>/usr/local/openmoko/</tt>目录。

* 切换到超级用户，然后解压缩。(请使用"su"，若您使用的是Debian/Ubuntu，请在tar指令前加入"sudo")：

   cd /
   tar -xjvf ~/sources/openmoko-XYZ-arm-linux-gnueabi-toolchain.tar.bz2

* 在类Debian系统上，你可以使用alien(+fakeroot)来将.tar.bz2文件构建成一个易于卸载的软件包(使用dpkg -i <package.deb>)： 


   bunzip2 openmoko-x86_64-arm-linux-gnueabi-toolchain.tar.bz2
   gzip openmoko-x86_64-arm-linux-gnueabi-toolchain.tar
   fakeroot alien -d openmoko-x86_64-arm-linux-gnueabi-toolchain.tar.gz

* 预构建的工具链是针对x86_64或i686的。如果你希望的话，你可以使用OpenEmbedded来建立自己的工具链：

   bitbake meta-toolchain-openmoko

最后，每次使用此工具链时，必须先改变环境变量，这样才会找到此工具链。此工具链提供了一个脚本来做这项工作。

请注意，如果你并没有使用"sh" 或"bash" shell (用"echo $SHELL" 查看) ，那你必须先启动"sh" 或"bash"。

 . /usr/local/openmoko/arm/setup-env

==构建示例项目==

在目标文件夹中 (本文为~/):

* 复制已下载的示例应用程序源文件：

 cp -r /usr/local/openmoko/source/openmoko-sample2 ~/

* 设定环境变量 (记得使用"sh" 或 "bash")：

 . /usr/local/openmoko/arm/setup-env

* 你必须为这个应用程序建立一个设定值，这个也可以用来检查你的系统上可以使用的所有必须的链接库、工具…等。如果这项工作无法完成时，请参考"需求环境"一节，取得更多信息。

om-conf openmoko-sample2

* 现在你可以选择性的修改openmoko-sample2/src 中的源码。

* 要从源码中建立应用程序，你应该使用"make"：

 cd openmoko-sample2
 make

如果你希望在主机上安装这个项目，你可以利用下面的操作，将它安装到一个现有的设定中：
 om-conf --prefix=/usr/local/openmoko openmoko-sample2
 cd openmoko-sample2
 make install

==如何修改范例项目==

为了要使用Openmoko-sample2 档案来制作你自己的项目，某些变更是必须的： * 复制下载的范例应用程序：
cp -r /usr/local/openmoko/source/openmoko-sample2 ~/
 
* 将档案夹以你的项目名称命名 ( 在这个范例中为your-project-name) ，并删除旧有的范例档案。

 mv openmoko-sample2 your-project-name
 cd your-project-name
 cd src
 rm *.c

* copy your sources (in this example your-sources) into src/

 cp your-sources .
 cd ..

* 现在，在主要的档案夹中，使用下面的指令修改autogen.sh 。

 PKG_NAME="your-project-name"

* 藉由更新下面的内容修改configure.ac 
 AC_INIT(your-project-main, 0.0.1, http://www.openmoko.org/)    
 AC_CONFIG_SRCDIR(src/main.c)

* 到data/ 档资夹，并且重新将这些档案命名： 
 cd data
 mv openmoko-sample.png your-project-name.png
 mv openmoko-sample.desktop your-project-name.desktop

* 用下列的指令修改data/下的Makefile.am 档案。

 dist_desktop_DATA = your-project-name.desktop
 dist_appicon_DATA = your-project-name.png

* 透过修改下面的内容，修改data/路径下的 Makefile.in
 
 dist_desktop_DATA = smart-search.desktop
 dist_appicon_DATA = smart-search.png

* 透过下面的内容，修改your-project-name：

 Name=your-project-name
 Encoding=UTF-8
 Version=0.0.1
 Type=Application
 Exec=your-project-name

*加入以下的内容，

 Icon=your-project-name

* 切换到src/ 资料夹

 cd ..
 cd src

* 藉由更新下面的程序，修改Makefile.am

 bin_PROGRAMS = your-project-name	
 your_project_name_SOURCES = \				
  		main.c 
 your_project_name_LDADD  = @DEPENDENCIES_LIBS@

* 请确认除了 main.c 外，修改，将所有的.c 及.h 档案 参数名称的 '-' 字符修改为 '_' 。

==封装你的应用程序==

我们已经加入了一个script在你的应用程序外制作了ipkg 。请注意这并不是要在Neo上测试你的应用程序 ( 若你要测试应用程序，你只要使用SCP产出的二进制代码及数据)，它对于想你将你的软件发布给其它人而言，相当方便。

 om-make-ipkg openmoko-sample2

现在你已经取得了openmoko-sample2_0.1_armv4t.ipk ，你可以将它`scp' 到你的Neo，并且安装它。

 scp openmoko-sample2_0.1_armv4t.ipk root@192.168.0.202:
 ssh root@192.168.0.202 ipkg install openmoko-sample2_0.1_armv4t.ipk

请注意当你重新发布产生的ipkg ，请注意它只是一个有更多信息的ipk骨架，若你无法取得链接库的独立性。查看下面的内容来暸解如何修复这个问题。
你也可以在控制档中提出这个版本的编号，描述及作者/连络方式。

 om-make-ipkg myapp myapp_control

myapp_control的范本：

 Package: $appname
 Version: 0.1
 Description: package built by openmoko toolchain
 Section: openmoko/applications
 Priority: optional
 Maintainer: $USER
 Architecture: armv4t
 Homepage: http://www.openmoko.org/
 Depends: 
 Source: ${SRC}

==从这里出发的目的地==

使用外部的 toolchain是一个为Neo建立程序的好方法。如果你熟悉这个产品的话，你也会想要参考：
* 使用[[Qemu]] 在仿真环境下测试应用程序
** Ubuntu使用者可能想要查看[[Automatic_emulation_in_Ubuntu]]
* 使用[[Host-based_development_with_Xoo_and_Xephyr|host-based development]] 加强效能
* 使用[[OpenEmbedded]] 客制化你的Openmoko套件映像档

=进阶议题=
==使用 toolchain 提供的链接库==
加入必要的链接库到src/Makefile.am 的 _LDADD 字段，如：
 openmoko_sample2_LDADD  = @DEPENDENCIES_LIBS@ -lmokogsmd2

之后，请确定再次执行
om-conf 

==将其它的链接库安装到toolchain==
不久之后，你会想要编译一个无法透过预先编译toolchain来完成依存性的程序，’如一些obscure libraries。

在这样的案例当中，请放心的将其它的libraries 放到下一次释出的Openmoko toolchain。以下是你如何扩充 toolchain安装。也就是说，我们想要加入一个名为liburiparse的链接库：

 cd ~/source
 wget http://downloads.sourceforge.net/uriparser/uriparser-0.6.0.tar.bz2
 ./configure --host=arm-angstrom-linux-gnueabi --prefix=/usr/local/openmoko/arm
 make
 make install

==使用OE包装应用程序==
当你撰写了一支很好的应用式，而你想要与其它人分享，最佳的方式是
# 上传你的程序原始码到公共的区域
# 送出[[BitBake]]到[[OpenEmbedded]]，最好的方法是透过[http://bugs.openembedded.org OpenEmbedded bugtracker]

您也可以参考 [[Customizing your OpenMoko distribution|客制化你的Openmoko套件]].

==问题排除==

* 请使用[http://lists.openmoko.org/mailman/listinfo/openmoko-devel OpenMoko-Devel] 邮件清单来取得更多帮助。


[[Category:Software ]]
[[Category:Application Developer]]
[[Category:Openmoko]]
