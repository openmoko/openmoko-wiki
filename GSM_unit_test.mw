GSM unit test is for testing the interactions between [http://wiki.openmoko.org/wiki/Gsmd#libgsmd-tool libgsmd-tool] and [http://wiki.openmoko.org/wiki/Gsmd gsmd].  Here is a [[Python]] script to execute commands via libgsmd-tool.  We can write our own test cases to let GSM modem execute AT commands automatically.  It allows us to verify [[GSM]] basic functions, such like making phone calls, sending SMS, or registering to the network.

This python script is based on [http://wiki.openmoko.org/wiki/Pexpect Python Expect].  Pexpect is a pure Python module for spawning child applications; controlling them; and responding to expected patterns in their output.  We use this module to spawn [libgsmd-tool] and then can send commands to GSM modem via gsmd.

== How to use this python script ==

  code is [[ here]]
 sample test case is [[here]]

  usage:  python UnivTestv1.py  -t  casename  -c  libgsmd-tool  -m  shell
  -t :  testcase file
  -c :  libgsmd-tool
  -m : atcmd or shell

=== How to write a test case file ===

==== text format ==== 
 it should be written as below: 
 
 C:r 
 E:Register,error 
 E:Netreg registered(home network),OK,error
 From above case, it sends 'r' command to libgsmd-tool and it tries to register the network.

==== real output from libgsmd-tool ====
 below texts are copied from libgsmd-tool shell mode 
 
 r
 # Register
 EVENT: Netreg searching for network 
 EVENT: Signal Quality: 22
 EVENT: Netreg registered (home network) LocationAreaCode = 0x2C27 CellID = 0x498C

==== how to write expect list to match the result ====
From above real output from libgsmd-tool, it's very easy to detect the expect behavior. The first expect, it prints the command descriptions. The second expect, we can use some keywords like 'Netreg registered' for this case.

* use ',' for the delimiter 

* always put the most matched one on the first element: There can be a lot of matched elements in an expect list.  Put this list before using 'error'

* append .EOF and .TIMEOUT elements to the expect list: When it reads the second expect line, it appends these two more elements to the list. 

* how to know it's failed or passed:  there are 4 cases
# correct: passed
# error: failed
# EOF: failed
# timeout: failed

* script log: It also stores the session log from 'libgsmd-tool', and the default file name is 'script.log'.
