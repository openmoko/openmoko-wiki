{{Languages|MokoMakefile}}

MokoMakefile 是在設立Openmoko Build環境時儲存所有工作的Makefile。藉由自動化安裝新的Openmoko build環境的過程，它提供所有的開發人員相同的設定環境。

透過設定新的Openmoko build環境設定過程，它提供為所有現有的開發人員相同的設定，但一般較喜歡透過手動或個別的設定程序設定。

它會為BUILD 環境產物提供相同的重覆性，並且可以像BitBake script放入[[OpenEmbedded]] 般輕鬆維護，並且提供建立OpenEmbedded的標準化過程。

它不像是在[[Building Openmoko 2007.1 from scratch|Building Openmoko from scratch]]中所提到的手動設定過程。MokiMakefile並不會安裝任何程式到你的系統裡(即使是一般的使用者也可以使用)。

MokoMakefile is a wrapper around all that to make it easy to set up and maintain a development environment that fully complies with the setup instructions published by Openmoko.

MokoMakefile是由[[User:RodWhitby|Rod Whitby]] 所開發--它並不是一個Openmoko正式的產品。 若它與[[OpenMoko2007.2#How_to_build|official OpenMoko build instructions]]及MokoMakefile有差異之處，你應該考慮用正式的操作來修正它。
MokoMakefile 可以建立OM-2007.1 或OM-2007.2 影像檔。核心團隊選擇預設值，但是你可以選擇Makefile中的一些工具來使用。

MokoMakefile也可以建立QEMU-based Neo1973 模擬器，將它視為安裝及執行Openmoko映像檔的目標裝置。這些指令也可以在沒有下載整個Openmoko OpenEmbedded套件的狀況下下載及建立映像檔。你可以在[[Using QEMU with MokoMakefile]]中找到這個部份的說明。

== 建置Openmoko的需求 ==
不論單獨或者是使用客製化的方法使用MokoMakefile來安裝Openmoko 環境，你必須符合某些需求，讓Openmoko build 可以成功運做：

* RAM：build host 必須擁有至少512MB的RAM，及與它相同大小的swap空間。有一些套件像是busybox由OpenEmbedded建立，它是藉由先編譯所有的來源檔案，使它成為二進位檔，它會讓 gcc 增加為超過 300MB 的大小，因此，會導致沒有記憶體可以用做swap之用，造成無法預期編譯時間的狀況。
對於busybox，這個可以關閉它，但關閉它並不會表示它能被gcc最佳化。

* 磁碟空間：你必須擁有12 GB的可用硬碟空間，供給Openmoko build使用(你可以參考下面的文節暸解怎麼減少所需磁碟空間用量)。

* 時間：initial build 會花費至少5小時的時間 (在沒有最佳化的多處理器的 2GHz core2duo 硬體環境下)且，在更慢速度的環境下，它可能會花費更長的時間。

=== 需求軟體 ===
OpenEmbedded 用來控制系統的版本是[http://monotone.ca monotone]，它並不是由MokoMakefile下載及安裝的。如果你的套件並沒有提供套裝軟體，你可以從http://monotone.ca 下載並安裝穩定的二進位檔。


Some distribution specific hints on preparing your build host for building OpenEmbedded are on   http://www.openembedded.org/wiki/OEandYourDistro but they may be outdated, incomplete and do not cover everything which OpenMoko needs to build.

在[[Building OpenMoko from scratch#Build host prerequisites|the section on build host prerequisites]] in [[Building OpenMoko from scratch]]是很好的導引文章。

如果你忘記了OE本身所必須使用的東西，OE將會在你開始build時出現提示，但是它並不會查看Openmoko的BUILD獨立性，所以，你必須在開始前先安裝它，或者在build失敗之後安裝它們。OpenEmbedded 會在你上次中斷build的地方重新開始。

==== 依套件而衍生的套裝軟體需求 ====
你的套件必須能提供以下的指令，以便於OpenEmbedded開始建立build：

 subversion texi2html texinfo help2man

Openmoko須要開發套件(搭配header檔案、開發程式庫及工具) 以利於完成BUILD：

 ncurses zlib (or libz) OpenSSL GTK++

因為在與QEMU及GCC-4互動時產生問題，你也必須安裝gcc-3.x 。


===== Debian / Ubuntu =====
  apt-get install subversion monotone build-essential help2man diffstat texi2html texinfo cvs gawk cogito

  apt-get install libncurses5-dev zlib1g-dev libssl-dev libgtk2.0-dev 
  # To prevent errors in host validation
  apt-get install ca-certificates
  # For OpenMoko 2007.2 using BitBake-1.8.8:
  apt-get install python-pysqlite2 sqlite3 sqlite3-doc python-pysqlite2-dbg
  # For building faster
  apt-get install quilt python-psyco ccache
  # For qemu, install a second compiler for bug avoidance; MokoMakefile knows to look for it.
  apt-get install gcc-3.4 g++-3.4 libsdl1.2-dev lynx netpbm dosfstools

===== SuSE =====
要在10.3上建立Openmoko，你必須要使用：

 gcc-c++ ncurses-devel zlib-devel libopenssl-devel gtk2-devel subversion diffstat texinfo help2man and [http://download.opensuse.org/repositories/devel:/tools:/scm/openSUSE_Factory/repodata/repoview/Development.Tools.group.html monotone]

為了讓MokoMakefile不要在編譯QUMU-USER時失敗，你必須使用gcc33：

 wget download.opensuse.org/repositories/devel:/tools:/gcc/openSUSE_Factory/i586/{cpp,gcc}33-3.3.3-41.8.i586.rpm
 rpm -Uhv {cpp,gcc}33-3.3.3-41.8.i586.rpm

你可以在[[Talk:MokoMakefile#Building_on_SuSE_Linux_10.3-AMD64|Talk page on Building on SuSE Linux 10.3-AMD64]]中找到它的內容。

10.1 及 10.2： 它與10.3套件相同，但是會安裝 <code>openssl-devel</code> 而不是libopenssl-devel。針對monotone，請使用[http://download.opensuse.org/repositories/devel:/tools:/scm/openSUSE_10.2/repodata/repoview/Development.Tools.group.html 10.2] or [http://download.opensuse.org/repositories/devel:/tools:/scm/SUSE_Linux_10.1/repodata/repoview/Development.Tools.group.html 10.1]。

==== 針對所有的套件 ====
如QEMU-based neo1973 模擬器也可以像由MokoMakefils開始建立映像檔的其中一部份，所以，你需要gcc-3.3及其它的軟體套件來建立QEMU安裝。你可以參考在[[Using QEMU with MokoMakefile|在MokoMakefile中使用UEMU]]中的 [[Using QEMU with MokoMakefile#Build requirements|建立映像檔基本需求]] 中所提到需求軟體訊息。

在編譯 QEMU 的過程若你有任何問題，或者是你不需要用到它，你可以藉由在build/conf/local.conf 檔案中加入下列的指令，來停用QEMU。

 ENABLE_BINARY_LOCALE_GENERATION = "0"

== 使用MokoMakefile建立Openmoko套件  ==

1 - 建立你的 $OMDIR 目錄 (請注意你可以將 ~/moko 目錄修改為任何你喜歡的目錄。如果你已經從不同的檔案系統掛載了 ~moko 目錄，請確認你有編輯 /etc/mtab目錄，為檔案系統加入'執行'權限，否則 bitbake則會出現錯誤訊息：

   mkdir ~/moko ; cd ~/moko
2 - 取得MokoMakefile:

   wget http://www.rwhitby.net/files/openmoko/Makefile

如果它無法使用的話，請試著使用下面的指令： 

   wget http://svn.projects.openmoko.org/svnroot/mokomakefile/trunk/Makefile

   note: 如果你想要從舊版的 2007.1 開始編譯，而不是使用新版的內容編譯Makefile，請從如下的內容開始編輯： 
             OPENMOKO_GENERATION = 2007.1
             #OPENMOKO_GENERATION = 2007.2

{{note|為了要建立2007.2，MokoMakefile使用的BitBake 1.8.8必須使用需要python-sqlite2 及 sqlite-3.3或之後的版本。SUSE Linux 10.1的使用者可以從 [http://download.opensuse.org/pub/opensuse/distribution/10.2/repo/oss/suse/i586/sqlite-3.3.8-14.i586.rpm 這裡更新openSUSE 10.2]}}

3 - 設定環境：
   make setup
4 - 開始building。在程序開始之前，請查看Tips一節，取得Make multicore aware。你可能想要修改build/conf/local.conf 檔案到你的目的地 (emulation/chroot) 環境：

   make openmoko-devel-image

''Hint:'' 使用這個指令建立的映像檔可以在下面的路徑下找到{$OMDIR}/build/tmp/deploy/images/neo1973

它將會設定在[[Building OpenMoko from scratch|從scratch中建立Openmoko]]建議的路徑結構，它會下載所有需要的檔案(從正確的地方取得正確的版本)，它將會立刻開始建立影像檔。

一旦你做好了它，你可以選擇繼續使用MokoMakefile來啟始你拉下來的build，或者你可以進入build 目錄，並且手動執行bitbake指令。你可以自行選擇自己要的方法。

==更新環境==
為了要更為容易的維護你所建立的環境，下面的指令是很有用的。

1 - 將MokoMakefile更新到最近的版本：

   make update-makefile 

2 - 確認建立的目錄架構是否有任何新的變更：

   make setup 

3 - 要更新Openmoko repository checkout 及MokoMakefile patches到最近的版本：

   make update

以最後變更的項目來重建新映像檔的最快方法：

   make update-makefile && make setup update openmoko-devel-image

==與製作映像檔相關的問題==
首先，確認在執行下面指令後，問題是可以重新製作：

 make update-makefile && make setup && make update

之後，執行：

 make clean-package-<foo>

( <foo> 替代為失敗的軟體名稱)

最後，

 make openmoko-devel-image

如果好運的話--你應該會在 $omdir/build/tmp/deploy/glibc/images/neo1973/ 目錄下找到映像檔。
接著，你可以參考 [[Flashing openmoko||Flashing openmoko更新這些內容]]

若是沒有找到映像檔的話，你可以在執行此一系列的命令列(包含更新及安裝操作)之後得到約三次的錯誤訊息，之後就可以將報告放到[http://wiki.openmoko.org/wiki/Development_resources#IRC IRC]中。

===已知的MokoMakefile錯誤 ===
從OM-2007.1 更新到 OM-2007.2，你會歷經下列過程：

 Patch bitbake-1.6.6-om3.patch does not apply (enforce with -f)

然後，鍵入 "make clobber-patches" 修復它。若在MokoMakefile中有BUG的話，它可能會進行約24小時。一旦patches遭到破壞，他們將會重新下載，並且這個問題就不會再發生。

如果你看到下列訊息：

 ERROR: No providers of build target u-boot-openmoko (for [])

查看日誌記錄來查看你是否遇到了與建立openmoko-devel-image 相同的錯誤，上面的錯誤是MokoMakefile的邏輯性的邊際效應，只要將"uboot-openmoko" 重新以 "u-boot-openmoko"命名即可。

===修正套件/特定環境或獨立性問題===

暫時性或獨立的問題時，都可以在[[Talk:MokoMakefile|討論頁]]中找到相關的內容。當他們被修復之後，他們將會從那個頁面中被移除。

==Tips==
*你可以藉由下列指令，減少消耗的磁碟空間：

   INHERIT += "rm_work"

將這行指令加到 local.conf (e.g. ~/moko/build/conf/local.conf)。 在相對應的軟體套件正確建立後，它將會移除T每一個映像檔中的/tmp/work/*/<package> 目錄。在10/16/07中，預設的情況下，它會出現在local.conf中。

*如果你在monotone中遇到了如下的錯誤：
   mtn: misuse: database /home/''username''/moko/OE.mtn is laid out according to an old schema

接著，你須要昇級OE.mtn。在~/moko中使用以下的內容：
   # mtn --db OE.mtn db migrate

* 如果特定的套裝軟體，因為下載中斷或者是試圖移動原始碼及重建它而沒有進行建立映像檔的工作：
 rm sources/<package>*
 cd build
 . ../setup-env
 bitbake -crebuild <package>

之後，你的BUILD可能必須重新運作一次。

*針對擁有多個CPU的使用者(或者dual-core)而言，這個小的patch might be useful to build things faster.

編輯local.conf 並且加入下列指令列：
 PARALLEL_MAKE = "-j 4"
 BB_NUMBER_THREADS = "4"

變更PARALLEL_MAKE 及 BB_NUMBER_THREADS 值，以配合裝置。

*針對amd64 主機的使用者，你必須從http://bugs.openembedded.org/show_bug.cgi?id=1765 修補到db3-native

* 如果遇到與 qemu-native 軟體相關的錯誤，並且沒有從qemu編譯，你可以編輯 build/conf/local.conf 檔案，並且啟用ENABLE_BINARY_LOCALE_GENERATION = "0" 指令列來避免這個錯誤。

* To prevent building tons of locales, add a line like this to local.conf:
 GLIBC_GENERATE_LOCALES = "en_US.UTF-8 nl_NL.UTF-8"

* To not build any binary locales at all, add this to local.conf:
 ENABLE_BINARY_LOCALE_GENERATION = "0"

* If you want to rebuild the package indexes (for instance, after compiling a new version of a package) without building <code>openmoko-devel-image</code>, run <code>make build-package-package-index</code>.

[[User:Wurp]] will update this to be a little more comprehensible, but maybe it can help someone as-is in the meantime:
* If MokoMakefile always fails on some fetch in zlib, just find the binary somewhere, add it to the downloads or sources directory manually (create the .md5 matching file if necessary), and retry.

=== 好用的指令列 ===
以下是MokoMakefile中較有用的指令清單(actually make targets) 及針對這些指令的一些簡單的介紹。它應該在$OMDIR 中執行。

; make openmoko-devel-image ：建立完整的開發映像檔。

; make openmoko-devel-tools ：建立靜態連結的[[dfu-util]]及[[openocd]]二位元檔

; make openmoko-toolchain ： 建立[[toolchain]]

; make qemu：建立qemu，從正式的下載點下載更新映像檔，更新qemu模擬的Neo1973並且執行模擬器(請參考[[OpenMoko under QEMU]])。 

; make qemu-local ：與''make qemu''，但是使用本機建立的映像檔，而不是官方的映像檔。

; make run-qemu ： 使用usb 鍵盤執行qemu''(note: qemu 必須先建立好！)''。This target starts the emulator with some predefined set of options. If you need to start it with other options (enable telnet, etc), see [[QEMU_command_line]].

; make build-package-<package name> : buids ''<package name>'' package

; make update-makefile : updates MokoMakefile

; make clean-package-<foo>: cleans the "<foo>" package

; make setup : to make sure that any recent changes to the build directory structure have been applied
   
; make update : to update the OpenMoko repository checkout and the MokoMakefile patches to the latest version

==使用MokoMakefile開發程式==


{{note|If using MokoMakefile with OM2007.2 then references to $OMDIR/openmoko should be replaced with $OMDIR/openembedded.  Also references to tmp/work/armv4t-linux should be replaced with tmp/work/fic-gta01-angstrom-linux-gnueabi}}

針對下列的解釋 $OMDIR 是Makefile放置所有東西的位置。

要讓in-tree 變更，並且讓它們可以被qemu使用：

  cd $OMDIR/openmoko
  quilt new descriptive-patch-name.patch
  quilt add trunk/src/name-of-file-to-change # do this for every file you are about to modify
  ...make the changes...
  quilt refresh # this creates a file in $OMDIR/patches/openmoko-HEAD/ and updates the quilt series file there

Note: Do '''NOT''' use absolute paths as this confuses quilt and will get you a diff of the file against /dev/null!

To build the changes and have them used by qemu:

  make build-qemu
  make flash-qemu-local
  make run-qemu

If you want to modify applications instead of the openmoko toolchain, this is what you have to do (example: openmoko-messages):

  cd $OMDIR/build
  . ../setup-env
  bitbake -c unpack openmoko-messages
  cd tmp/work/armv4t-linux/openmoko-messages-0.0.1+svnnow-r2_2276/openmoko-messages/
  ''...make the changes...''
  cd -
  bitbake openmoko-messages

Then continue with MokoMakefile usage.

If you want to add an application to your openmoko distribution, do this:
All file edits should be done using quilt as described above. That way a patch can easily be submitted to the openmoko project.
First, create a directory that will correspond to your package and edit a '''.bb''' file in there:
  cd $OMDIR/openmoko/
  quilt new mycoolpackage.patch
  mkdir trunk/oe/packages/mycoolpackage
  quilt add trunk/oe/packages/mycoolpackage/mycoolpackage_1.bb
  quilt edit trunk/oe/packages/mycoolpackage/mycoolpackage_1.bb

The file should have the following content:
  DESCRIPTION = "This is a cool package"
  SECTION = "username/mycoolpackage"
  PV = "1"
  
  inherit autotools
  
  SRC_URI = "http://www.example.com/download/mycoolpackage-1.tar.gz"

Explanation:
* DESCRIPTION - Just a short text explaining the package
* SECTION - I have no clue, but I'll use username/mycoolpackage for now
* PV - Package Version
* inherit autotools - The package can be compiled by './configure && make && make install' so we tell MokoMakefile to do it this way.
* SRC_URI = ... - This is the download location of the package source. It's imperative that the tar.gz contains a directory called '''packagename-packageversion''' (in this case: mycoolpackage-1) so that MokoMakefile can find it automatically or the build will fail.

This is not all. We also need to tell MokoMakfile that it needs to build and include the package in the image. To do this, do
  $OMDIR/openmoko# quilt edit trunk/oe/packages/tasks/task-openmoko.bb
Here, increase the value '''PR''' by one and add '''mycoolpackage \''' (with the backslash!) just before the line reading '''#  update-alternatives \'''.

Now run
  quilt refresh
  cd ..
  make update openmoko-devel-image

And if everything's alright you should now have an OpenMoko image to flash to your phone or run in qemu as described above.

=== Hello World application ===

There is a [http://wiki.openmoko.org/wiki/Building_a_hello_world_application Hello World!] tutorial available too.

==Testimonials==
MokoMakefile is recommended by 4 out of 4 new developers on #openmoko, with testimonials such as "For some reason last night I couldn't get my manual install of everything to work (bb complained about my bbpath I think) ... but with your makefile, it works great!", "MokoMakefile rocks!", "Wow this build system is nice - it just seems more polished than my gumstix toolchain buildroot system", and "make openmoko-devel-image :) - no magic there".

Project page:
http://mokomakefile.projects.openmoko.org/


[[Category:Software]]
[[Category:Applications]]
[[Category:Application Developer]]
