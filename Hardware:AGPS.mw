[[GPS]] is a satellite based positioning system. '''Assisted GPS''', or '''A-GPS''' was introduced to enhance performance.

Conventional GPS had difficulty providing reliable positions in environments surrounded by tall buildings - the so-called 'urban canyon', as well as indoors and under heavy tree cover.

Under these conditions, the GPS signal is often of very poor quality, making it hard for receivers to obtain a position. In addition, when first turned on in these conditions, a non-'''A-GPS''' may not be able to download the orbital information from the GPS satellites, rendering it unable to function until it has a clear signal for around one minute.

An '''A-GPS''' receiver can address these problems in several ways, using an ''Assistance Server'':
*The Assistance Server has a good satellite signal, and lots of computation power, so it can compare fragmentary signals relayed to it by cell phones, with the satellite signal it receives directly, and then inform the cell phone or emergency services of the cell phone's position.
*It can supply orbital data for the GPS satellites to the cell phone, enabling the cell phone to lock to the satellites when it otherwise could not, and autonomously calculate its position.
*It can have better knowledge of ionospheric conditions and other errors affecting the GPS signal than the cell phone alone, enabling more precise calculation of position.


The AGPS chip in the Neo1973 is called Hammerhead, and it is the same chip used in TomTom one devices, which incidentally run Linux, too. See [[Hammerhead/Protocol]].

With AGPS, the Hammerhead brief information page specifies 1s fix time for a position with 5m error.

AGPS is purely a marketing term. 
To calculate the position a GPS chip needs:
* ''almanac'' = coarse position of satellites
* ''ephemeris'' = precise position of satellites

The almanac is broadcast in a loop of 12.5 minutes and valid for at least six weeks. The ephemeris is broadcast in a loop of 30 seconds and valid for ~2 hours.

Receiver chipsets store this data in flash and load it from there onto the chip in order to _assist_ the hot or warm start.

One form of AGPS is simply to get this data from elsewhere. Over the internet, or through a dedicated connection, to avoid the 30s or more downloading it from the satellites would take.

The supplied binary driver software for the Hammerhead in the Neo1973 does not support publically available sources of assistance data. An open-source driver, in companion with [[Server:AGPS]] may do any of the solutions mentioned at the beginning.

The amount of data needed is small - 0.5K/day or so.

If the spot you charge your neo happens to have a GPS signal, downloading the almanac from the satellites while it charges is essentially free, and takes no Internet access at all. Do this daily, and you get most of the benefit of AGPS.



== Q: What is DGPS, can DGPS and A-GPS work together? ==

A: [http://www.oc.nps.navy.mil/oc2902w/gps/dgpsnote.html An overview of DGPS] Differential GPS is basically a way of removing systematic per-satellite errors from various causes (satellite clock drift, atmospheric effects) for 'nearby' receivers, given one receiver that knows where it is.

The per-satellite range errors to a satellite are around 2-3 metres typically. These per-satellite errors are similar for users close to each other.
These corrections are broadcast by radio in much of the USA (which the neo cannot pick up).

If you can download error information from a nearby source, then you can obtain positions that are much more accurate than without this information. Perhaps well under 1m radius of error, instead of 2 or 3. In some applications this may be of use.

It may be that the apgsd cannot do this, and it will require reverse engineering.

In any case, this would be another few hundred bytes a minute while this is active. (the  error information rapidly ages).

Any stationary receiver - even a neo on charge, with a good signal, can produce useful error information. If it had a cheap internet connection at the same time, it could be constantly updating a global error model, for use by other neo owners.

It may be that the apgsd cannot do this, and it will require reverse engineering.


== Q: What is WAAS, can WAAS and A-GPS work together? ==

A: [http://en.wikipedia.org/wiki/WAAS WAAS] is a recently-introduced technology that performs a similar role to DGPS - providing information that allows a receiver to calculate a more accurate position. It differs in that the correction signals are transmitted by other GPS satellites (in geostationary orbit rather than the normal 12-hour orbit), rather than by terrestrial radio stations. 

(If you can answer the second part of the question, please edit this note. I don't know. [[User:Mmontour|Mmontour]] 17:08, 17 August 2007 (CEST))


== Q: Is an open-source GPS daemon able to be distributed by FIC? ==
[http://www.fas.org/spp/starwars/offdocs/itar/p121.htm A web copy of the ITAR - International Traffic in Arms Regulation legislation, currently in force in the US]

While stupid, this defines

----
... GPS receiving equipment with any of the following characteristics:
...
   (2) Designed for producing navigation results above 60,000 feet altitude
       and at 1,000 knots velocity or greater;
----

as being a munition.
This is right after the section prohibiting rockets that can be used to deorbit satellites on a specific target, and just before nuclear weapons design and test equipment.

And just because it's stupid doesn't mean they won't kick the doors in - or prevent it from sale and levy huge fines, after the gleefull lawyers at Apple point it out. (you need DOD licenses to import/export)

The plugin for the gpsd daemon presumably implements this limit.

Much established hardware has pretty much confirmed that it's OK to do it this way - as long as it's closed source, you can point at the evil hackers, and say that you never did it.

An open source plugin for gpsd distributed with the neo might raise other issues, namely that at some point in the code, there is a self-documented if(velocity>1000kt) test, which can be trivially commented out.
(the hardware must be able to do this, the velocity of a satellite towards and away from the user greatly exceeds 1000 knots.)

If I was FIC, I would at the very least want a good legal opinion on if an open source gpsd plugin (perhaps a user contributed one after decoding the binary stream that the hammerhead puts out) can be safely distributed, before doing so.

--[[User:Morricone|Morricone]] 11:15, 16 February 2007 (CET) You forget, that FIC is not located in the USA, so US laws do not apply.

Very true, however, this would mean that it could not be imported into the US.
Also that anyone from FIC involved in this could not travel to the US without fear of arrest.
The penalties are really quite high.
--[[User:Speedevil|Speedevil]] 14:10, 16 February 2007 (CET)

Isn't this resriction implemented in the chipset? wouldn't the chipset itself be illegal in the US without these restrictions?
--[[User:Kiney|Kiney]] 22:20, 14 March 2007 (CET)

The chipset is too dumb. It does not know the position or the velocity. This is only computed in the host CPU. --[[User:Speedevil|Speedevil]] 06:17, 25 March 2007 (CEST)


However, there must be some code/license bypass to this.
I'm not supporting license and restriction violation, but legal way to provide opensource gpsd.
For example:

1) put gpsd in for example LGPL, then provide restriction module as a must, and put module under license that allows open source code, but doesn't allow changes that will break gps module usage restrictions - this way gpsd works, and all restrictions are preserved.

2) Put gpsd into GPL with explicit restriction on code forks that change restriction.

3) Make an end-user license agreement that he will not use it above 60000ft, and 1000knots.

4) mixture of 1,2,3
<snip>
If you can't solve restrictions, transfer it.
--[[User:Milos|Milos]] 13:17, 27 July2007 (CEST)

License restrictions won't work.
The legislation does not say "A GPS receiver capable of...unless it is restricted by license".
The question is simple: Would hardware distributed with open-source software that effectively has the "unrestrict" switch documented fall under the definitions of a GPS receiver within the meaning of the legislation.
If it does, then FIC simply can't distribute it (at least within the USA).

If it doesn't, then there is no problem.

However, this is only plausibly answerable by a lawyer specialising in ITAR.

The (snipped) analogy to guns is not correct - the correct analogy is to devices that might or might not be nuclear weapons test equipment. That's what this bit of law also deals with.

Anyway. The closed-source daemon works just fine (mostly). It can be wrapped in a chroot for the paranoid, but simply distributing this will work for the medium term. If users choose to install other drivers, that's their problem. --[[User:Speedevil|Speedevil]] 15:34, 28 June 2007 (CEST)


The open-source driver could very well be available online, and FIC can just ship the binary with the Neo1973.  Since there already is NMEA information available, producing a very stable open-source GPS driver may take awhile.  Some users (not developers) may not care how the GPS information is acquired, as long as it just "works".  As a marketing perspective, it would be nice to say that the Neo1973 software is completely open source...

The ITAR legislation may not apply, considering the phone is currently not "''Designed for'' producing navigation results above 60,000 feet altitude and at 1,000 knots velocity or greater;"

--[[User:Ciphercast|Ciphercast]] 04:26, 22 July 2007 (CEST)


[[Category:Neo1973 Hardware]]

[[Category:GPS]]
