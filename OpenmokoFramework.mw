''Note: This is the (ongoing) description of the new framework architecture. See [[OpenmokoOldFramework]] for the framework architecture of 2007.1 and 2007.2''

=Purposes=
* '''Give people the infrastructure to create solid and exciting software products based on the Openmoko platform'''
* '''Support competing UIs while collaborating on developing services'''
* '''Encourage framework users (e.g. application developers) to also contribute to the framework'''

=Requirements=
* Make it simple
* Concentrate on core services
* Be programming language agnostic
* Be UI toolkit agnostic
* Try to reuse existing technologies as much as possible, but not at the cost of a bad API

=How to achieve that technically=
* Chose [[Dbus]] as the collaboration line. Below dbus, we can work together. Above dbus, we can differentiate.
* Expose features through dbus APIs implemented by UI-agnostic and language-agnostic services (daemons).
* Optimize for Openmoko devices, but support multiple architectures and purposes through plugin interfaces and suitable hardware abstraction mechanisms.
* Be not afraid of reinventing the wheel for a wheel-barrow if all the existing wheels are made for sports cars.

=Mandatory Readings=
* [http://adam.gomaa.us/blog/frameworks-exist-for-conceptual-integrity/ Frameworks exist for conceptual integrity]
* [http://humanized.com/weblog/2007/10/05/make_oss_humane/ Ten ways to make more humane open source software]
* [http://www.freesmartphone.org FreeSmartPhone.org Wiki]

=What this is NOT about=
This initiative does not cover low level services such as
* Bootloader, Kernel, or System Init.

This initiative does not cover high level services such as
* X-Window-System, Window Manager, UI Toolkits,
* Application Launchers, Applications, or Fancy UIs.

=Architectural Overview=
[[Image:OpenmokoFramework08.png |823px|left|frontside]]

''Note: V0.9 :-) Need to update it soon''

=Software Components=

We differenciate between low-level and high-level services -- dbus will be used to communicate horizontally and vertically.

===Low-Level Services===

====Device Control====
This is about peripheral control, i.e. managing power for individual subsystems such as
* GSM, WiFi, Bluetooth, GPS, as well as
* Backlight brightness and power,
* turning LEDs on and off, etc.
It's also about access to
* charging, suspend/resume,
* accellerometers, and buttons.

====Audio====
TBD
* pulseaudio
* gstreamer

====GSM====
TBD

====Bluetooth====
TBD

We base on the official Linux Bluetooth subsystem here, which is [http://www.bluez.org BlueZ]. 

====GPS====
TBD

We base on Gypsy here.

====Network (LL)====

Wifi
USB
Options: Networkmanager or Intel Connection Manager

===High Level===

====Usage====
* coordinating application I/O requirements (think ''reference counting'' for I/O requirements)
* might use fd.o policy API

====Events====
* signaling events via I/O (ringing, blinking, vibrating)
* might use fd.o notification API

====PIM====
* intelligent storage database
* GSoC2008

====Context====
* Intelligent context API, integrating location as one -- among other -- sources
TBD
Reference Geoclue

====Telephony====
* Voice
* Data

===Preferences===
* settings database

====Network====
* high level networking queries

=Implementation Tasks=

==What's there==
* bluez
* gypsy
* geoclue
* py-odeviced
* pygsmd
* gsmd0710muxd
* networkmanager or intel connection manager
* ppp

==What's missing or not fully completed==
* py-ophoned
* py-odeviced
* pimd (GSoC 2008 project)
* eventd
* usaged
* preferencesd
* contextd

=The role of Python=

Where we write new code, we will use Python to implement the dbus services. The reason for that being the rapid prototyping nature of Python and the emphasis on the Dbus APIs. Using Python, the turnaround times to experiment with APIs are incredibly faster than for using a compiled language such as C or C++.

Once the APIs have been used by application programmers, we can start profiling and possibly reimplement some of the services with daemons written in Vala, ''if'' necessary. We might as well succeed in improving performance by using PyRex/Cython/Ctypes to keep the benefits of Python.

=Team & Roadmap=

... talk about the team and the roadmap ...
