The Neo1973 device contains an integrated GPS. The particular device
is marketed as an AGPS, and there is some [[Hardware:AGPS |
discussion]] available as to what significance that "A" might have.

Note that the GTA02 device contains u-blox ANTARIS 4 solution, you could find more hardware related information before GTA02 hardware page.

Assisted GPS performance requirement also defined in GSM/GPRS 3GPP TS 25.171, CDMA 3GPP2 C.S0036-0<br>

=== GTA01 GPS driver (gllin) ===
''Main article - [[gllin]]''

The GPS driver is available here: [http://3rdparty.downloads.openmoko.org/gllin/ http://3rdparty.downloads.openmoko.org/gllin/]. It is a command line tool that after starting writes the positioning data so that they can be read as if they were written to the file.

And here the Mail from Michael Shiloh [http://lists.openmoko.org/pipermail/community/2007-November/011916.html http://lists.openmoko.org/pipermail/community/2007-November/011916.html]


In the very early shipment to 50 Phase 1 developers, a binary-only program for talking to the the GPS was accidentally included 
in /home/root/DM2/gps, (and presumably, the same binary would function on a P0 device).
This binary is called gllin and it is a oabi binary, i.e. it will only work in the 2007.1 Openmoko environment. There is now a eabi binary, which works with 2007.2. 

There was an effort to write a Free Software
program that could be used instead of this binary-only program, but this stalled after the decision to change GPS chips in GTA02.

See [[Hammerhead/Protocol]] for details and the latest status.

Some scripts for those with the binary are on [[Manually_using_GPS]]

Please see the important information on [[Gllin]]!

=== GTA02 GPS ===

For detailed GTA02 u-blox 4 GPS information, please check here: [http://wiki.openmoko.org/wiki/GTA02_GPS GTA02 GPS]

To turn on the GPS, echo 1 to the file /sys/devices/platform/s3c2440-i2c/i2c-adapter/i2c-0/0-0073/neo1973-pm-gps.0/pwron

To read from the GPS, simply read /dev/ttySAC1.

cat /dev/ttySAC1 will work fine.

Before getting a fix, the GPS spits out lots of "$GPTXT,01,01,01,NMEA unknown msg*58", though these stop once a fix is obtained. 
A position without a fix looks like:
* $GPGGA,235946.99,,,,,00,00,5.0,,M,0.0001999,M,0.0020199,*57
One with a fix:
* $GPGGA,065852.00,5613.022527,N,00306.725890,W,1,05,0.5,158.0,M,0.277000,M,-0.010
0515,*7A

(central Scotland)

--[[User:Speedevil|Speedevil]] 11:52, 7 April 2008 (CEST)

In Openmoko projects, you could find a GPS test program that could provide graphical and text dump of GPS information. This project called [http://svn.projects.openmoko.org/svnroot/openmoko-agpsui Openmoko AGPS UI project].

=== Possible GPS programs ===

As people develop more sophisticated GPS applications, please note them here.

Here are some ideas for possibilities:

* Cairo-based mapping
* Routing
* [[Openstreetmap]] a map viewer, annotation, and editing system.
* [http://wiki.openstreetmap.org/index.php/Pyroute Pyroute] is a routing program written in Python by Ojw, and a mobile phone GUI for maps, GPS, and routing.
:* [http://wiki.openstreetmap.org/index.php/Rana Ran&aacute;] is the new version of pyroute
* [[GPS-Trail]] a simple trail logger.
* [[GPS_Navigation#roadmap|roadmap]] mapping system using freely available maps (US census TIGER, DGLib, shapefiles).
* [[Geocaching]] paper chase for advanced users
* Set Profile (Mute, etc.) to coordinates (ex. At work)
* [[qpegps]] qtopia (arm PDA) based map viewer with gps features
* [[Navit]] a car navigation system with routing engine.
* [http://www.tangogps.org TangoGPS] works very well, downloads maps on demand and stores them for later use, very efficient. 
* [[QMapControl]] Qtopia based mapping widget. Displays maps and custom data, also other widgets can be bound to coordinates. GPS parser for the gllin output included.
* [http://lists.openmoko.org/pipermail/community/2007-July/007252.html collection of ideas]
* [http://www.kflog.org/cumulus/ Cumulus] GPS software for glider pilots (and pilots in general), has a port for Qtopia and pulls (world) maps from the KFLog flight planner project. I think someone has put a project like this on the projects website [http://projects.openmoko.org/projects/openvario/ here].
* [http://svn.projects.openmoko.org/svnroot/openmoko-agpsui Openmoko AGPS UI project].
* [[GPS Sight]], a popular Openmoko project under LGPL.
* [[Orrery]], an unpopular Openmoko project for displaying the night sky.
* [http://wiki.openstreetmap.org/index.php/Gosmore Gosmore] is a routing and viewer of OSM XML data such as the planet.osm.

== Using the Neo's GPS on a Laptop ==

*First be sure you have gllin installed on the Neo.
*On host type: '''nc -vvn -l -p 5000 > /tmp/nmeaNP'''
*On the Neo type:   '''nc 192.168.0.200 5000 < /tmp/nmeaNP'''
*
*On the host PC install GPSD, your GPS is attached as /tmp/nmeaNP 
*start gpsd on host with: '''gpsd -p /tmp/nmeaNP'''
*run your application! I used gpsdrive and it works better than my stand-alone GPS. 
*Tested with RoadNav.Works great!
*
*With this in mind if you have an unlimited data package you could export this over the internet.
*the possibilities are limitless.  

== Bluetooth GPS relay ==

To make your neo appear like a regular bluetooth GPS:

*Power up the bluetooth radio
*Run the gllin script
*run '''sdptool add SP'''
*run '''rfcomm watch 0 1 sh -c "cat /tmp/nmeaNP >/dev/rfcomm0" &'''


[[Category:GPS]]

[[category:Documentation]]
[[category:Standard]]
