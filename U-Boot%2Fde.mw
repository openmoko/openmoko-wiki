[[Image:GTA01-U-Boot.JPG|thumb|300px|u-boot on Neo1973 console]] [[Image:Neo1973 uboot splash closeup.jpg|thumb|300px|u-boot boot splash on Neo1973]]

== Phase0 Schnellstart ==	
* Überprüfen, dass die Batterie eingebaut ist und der USB Kabel innerhalb der letzten 30 Sekunden nirgendwo angeschlossen war.
* Das Neo (nicht das Debug Board) an einen Linux Rechner mit dem USB Kabel anschließen.
* Gleichzeitig die AUX und Power-up gedrückt halten, um ins Bootmenü zu gelangen.
* Die Konsole auf USB einstellen.
* Am /dev/ttyACM0 mit einem Terminalprogramm über einen Linux Rechner (evtl. "chown uucp.uucp /dev/ttyACM0" notwendig) verbinden.
* Beachten Sie, dass der cdc_acm /dev/ttyACM0 Zugang wärend des Ladevorganges nicht verfügbar ist, und im weiteren funktioniert der Zugriff über die Netzwerkschnittstelle usb0.
* Jetzt sehen sie das Bootlader Menü.

== Allgemein ==

Das GTA01 nutzt den [http://u-boot.sourceforge.net/ u-boot] Bootlader.

Mehr Informationen zum u-boot finden Sie unter 
* http://www.denx.de/wiki/DULG
* http://www.gumstix.org/tikiwiki/tiki-index.php?page=U-Boot
* http://linuxdevices.com/articles/AT5085702347.html

Bereits implementierte Erweiterungen zum Vanilla u-boot enthalten:
* Unterstützung für das Booten vom NAND Flash unter Verwendung von [[S3C2410 Steppingstone]]
* Unterstützung des S3C2410 NAND Flash
* Unterstützung für das Downloaden von Programmen über den S3C2410 USB Device Controller
* Unterstützung der Fortschrittsanzeige bzw. des Logos über den S3C2410 Framebuffer beim Booten 

Jedoch unterstützt u-boot einige für das GTA01 erforderliche Funktionen nicht:
* Unterstützung für das Laden des Kernels/initrd von der SD/Transflash Karte

[[User:HaraldWelte]] is working on those issues, and in fact most of them have already been implemented.

== Bootlader Quellcode ==

Die aktuellen Patches des Bootlader sind zu finden unter http://svn.openmoko.org/trunk/src/target/u-boot/patches/.

Entpacken Sie die Quellen, wenden Sie den Patch an, fühern Sie "make gta01bv3_config" (oder "gta01bv2_config", oder das, welcher Hardwareversion Sie haben) aus und führen Sie "make" aus.
Als Resultat erhalten sie die Binärdatei "u-boot.bin", welche Sie direkt (entweder mit dem vorhandenen Bootlader oder [[sjf2410-linux]]) in den NAND Flash Speicher laden können.

== Bootlader Binärdatei ==

Den aktuellsten Binärimage des Bootladers funden Sie unter http://buildhost.openmoko.org/snapshots/2007.08/images/. Dieses soll auf die Adresse 0x00000000 im NAND Flashspeichers geschrieben werden (Größe 0x30000).

== Bootloader Entwicklung ==

=== QT2410 ===
Wenn Sie Entwicklung des Bootladers unter QT2410 betreiben möchten, dann ist es einfacher, mit einem Bootlader Image zu arbeiten, das per USB ins Ram geflasht werden kann.

Um dies zu tun, müssen Sie die Datei u-boot/include/configs/qt2410.h editieren ("if 0" in der Zeile 32 auf "if 1" ändern) und danach mit "make" neu übersetzen.

Die resultierende Datei "u-boot.bin" ist _NICHT_ für NAND verwendbar, sondern nur direkt im RAM, indem Sie z.B. das Programm [[s3c2410_boot_usb]] verwenden.

=== GTA01 ===

Bootlader Entwicklung unter GTA01 ist etwas trickreich. Zuerst haben wir keinen NOR Flash. Zweitens, es gibt aber keine andere Weise vom NAND zu laden. Folglich haben wir keinen USB Downloader wie das QT2410.

Das Hauptproblem ist: Das [[S3C2410 Steppingstone]] kopiert unbedingt die ersten 4k des Flashes ins interne SRAM. Das SRAM Segment bleibt an der physischen Adresse allerdings auf null.

==== Nutzen des JTAG zum Booten aus dem RAM ====

So, wie kann man nun vom RAM booten? Dazu nutzt man JTAG / OpenOCD, um

* Zurücksetzen und Halten der CPU auf PC=0
<pre>
> reset halt
target halted in ARM state due to debug request, current mode: Supervisor
cpsr: 0x400000d3 pc: 0x00000000
MMU: disabled, D-Cache: disabled, I-Cache: disabled
</pre>

* Herunterladen eines kleinen Stückes Code vom SRAM (4k SRAM von Steppingstone überschreiben). 
<pre>
> load_binary /space/misc/gta01/u-boot.git/board/gta01/lowlevel_foo.bin 0            
downloaded 332 byte in 0s 21899us
</pre>

* Setzen einer Sprungmarke an der Adresse 0x33f80000 (was anzeigt, dass das low-level Code an dieser Stelle endet)
<pre>
> bp 0x33f80000 4 hw
breakpoint added at address 0x33f80000
</pre>

* Den Code bis zur Sprungmarke ausführen
<pre>
> resume
Target 0 resumed
> Target 0 halted
target halted in ARM state due to breakpoint, current mode: Supervisor
cpsr: 0x600000d3 pc: 0x33f80000
MMU: disabled, D-Cache: disabled, I-Cache: enabled
</pre>

* Das u-boot Image auf die Ardesse 0x33f80000 laden
<pre>
> load_binary /space/misc/gta01/u-boot.git/u-boot.bin 0x33f80000
downloaded 135692 byte in 6s 567264us
</pre>

* Ausführung fortsetzen
<pre>
> resume
Target 0 resumed
</pre>

Ab diesem Punkt wird die Hintergrundbeleuchtung hell und man sieht folgende vertraute Kommandozeilenaufforderung auf der seriellen Konsole.
<pre>
U-Boot 1.1.6 (Jan 13 2007 - 23:44:23)

DRAM:  128 MB
NAND:  64 MiB
*** Warning - bad CRC or NAND, using default environment

In:    serial
Out:   serial
Err:   serial
Hit any key to stop autoboot:  0 
GTA01Bv2 # 
</pre>

== Erzeugen der bootbaren Images ==

u-boot benötigt bootbare Images (wie der Kernel, aber auch initrd und andere) in Form des sogenannten ''uImage''. Um ein ''uImage'' von z.B. einem ''vmlinuz'' zu erzeugen, kann man wie folgt vorgehen:

<pre>
objcopy -O binary -R .note -R .comment -S vmlinux linux.bin
gzip -9 linux.bin
u-boot/tools/mkimage -A arm -O linux -T kernel -C gzip -a 30008000 -e 30008000 \
                                 -n "Kernel Image QT2410" -d linux.bin.gz uImage
</pre>

== Bootmenü ==
[[Image:Neo1973 uboot menu.jpg|thumb|400px|u-boot boot menu on Neo1973]]

Ab dem Phase-0 Release zeigt jetzt unsere u-boot Version ein Bootmenü auf dem Startbildschirm an.

=== Zugriff auf das Bootmenü ===

Um ins Bootmenü zu gelangen, müssen Sie gleichzeitig den [[Neo1973 AUX Button]] und den Power Button gedrückt halten.

=== Nutzung des Bootmenü ===

Mit dem [[Neo1973 AUX Button]] können Sie zwischen den Menüoptionen wechseln. Mit dem ''POWER'' Button wählen Sie eine Option aus.

=== Hunzufügen von Menüpunkten zum Bootmenü ===

Sie können weitere Optionen zum Bootmenü hinzufügen indem Sie Umgebungsvariablen setzen. Die kanonische Form ist ''menu_<number> <Title>: U-Boot-Commands''

Zum Beispiel fügt folgender Befehl einen Menüeintrag, der auf das Schnellladen schaltet und die Hintergrundbeleuchtung deaktiviert:
  setenv menu_6 Autofast-Charge and Backlight Off: neo1973 charger autofast\; neo1973 backlight off
  saveenv

In diesem Zustand kann das Neo1973 mit einem üblichen USB Ladegerät aufgeladen werden. Sie müssen allerdings 'setenv boot_menu_timeout 65000' setzen, um das Abschalten zu verhindern.

== Bootlader Kommandozeile ==

=== Accessing the bootloader prompt ===
The bootloader prompt is available either on the serial console (via [[Debug Board]]), or as virtual USB Serial device (USB CDC_ACM).
Whether the serial port or usb is used depends on the u-boot environment variables '''stdin''', '''stdout''' and '''stderr'''.

Whether or not you use usbtty, the first couple of messages will always be displayed on the serial console.

The bootloader is currently configured to wait for three seconds.  If a key press on the '''stdin''' is received within those three seconds, auto-boot is aborted.

==== Nutzung von usbtty unter Linux ====

Just by connecting the phone in u-boot mode to your Linux pc should make it detect a [[CDC ACM]] device, and you should get a new tty device called /dev/ttyACM0. If not, enable the CONFIG_USB_ACM (Device Drivers -> USB support -> USB Modem (CDC ACM) support). (Instructions for MacOS users are [[MacOS_X#USB_Serial|here]])

Use your favourite terminal emulator (minicom, cu, zc, screen ...) to access it like any other serial port. If you don't have a favorite, try just: (cu is in the taylor-uucp package, use "apt-get install cu" if it is not yet installed)
 cu -l /dev/ttyACM0

You might need to 
 chown uucp.uucp /dev/ttyACM0

to get the necessary right (even as root).

First, you should try to check whether the USB device shows up in 'lsusb' while you're running in u-boot mode:

 # lsusb -d 1457:5119
 Bus 005 Device 079: ID 1457:5119  

Second, lets see some more details about the available endpoints and configurations:

<pre>
# lsusb -v -d 1457:5119
Bus 005 Device 079: ID 1457:5119  
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               1.10
  bDeviceClass            2 Communications
  bDeviceSubClass         0 
  bDeviceProtocol         0 
  bMaxPacketSize0        16
  idVendor           0x1457 
  idProduct          0x5119 
  bcdDevice            0.00
  iManufacturer           1 OpenMoko, Inc
  iProduct                2 Neo1973 Bootloader U-Boot 1.2.0-g6c7cac8c-dirty-moko3
  iSerial                 3 0000000
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength           85
    bNumInterfaces          3
    bConfigurationValue     1
    iConfiguration          4 TTY via USB
    bmAttributes         0xc0
      Self Powered
    MaxPower                0mA
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        0
      bAlternateSetting       0
      bNumEndpoints           1
      bInterfaceClass         2 Communications
      bInterfaceSubClass      2 Abstract (modem)
      bInterfaceProtocol      1 AT-commands (v.25ter)
      iInterface              6 Control Interface
      CDC Header:
        bcdCDC               0.6e
      CDC Call Management:
        bmCapabilities       0x00
        bDataInterface          1
      CDC ACM:
        bmCapabilities       0x00
      CDC Union:
        bMasterInterface        0
        bSlaveInterface         1 
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            3
          Transfer Type            Interrupt
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0010  1x 16 bytes
        bInterval             255
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        1
      bAlternateSetting       0
      bNumEndpoints           2
      bInterfaceClass        10 CDC Data
      bInterfaceSubClass      0 Unused
      bInterfaceProtocol      0 
      iInterface              5 Bulk Data Interface
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x02  EP 2 OUT
        bmAttributes            2
          Transfer Type            Bulk
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0010  1x 16 bytes
        bInterval             255
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x83  EP 3 IN
        bmAttributes            2
          Transfer Type            Bulk
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0010  1x 16 bytes
        bInterval             255
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        2
      bAlternateSetting       0
      bNumEndpoints           0
      bInterfaceClass       254 Application Specific Interface
      bInterfaceSubClass      1 Device Firmware Update
      bInterfaceProtocol      1 
      iInterface              7 USB Device Firmware Upgrade
Device Status:     0x0001
  Self Powered
</pre>

Next, you can access it using your favourite terminal program.

Then, if the environment is not set correctly, you will need to use the current console (e.g. serial console) to set
<pre>
GTA01Bv2 # setenv stderr usbtty
GTA01Bv2 # setenv stdout usbtty
GTA01Bv2 # setenv stdin usbtty
</pre>

==== Typischer u-boot Prompt ====

<pre>
U-Boot 1.2.0-moko1 (Feb 16 2007 - 00:36:13)

DRAM:  128 MB
NAND:  64 MiB
Found Environment offset in OOB..
Video: 640x480x8 31kHz 59Hz
USB:   S3C2410 USB Deviced
In:    serial
Out:   serial
Err:   serial
Hit any key to stop autoboot:  0 
GTA01Bv3 #
</pre>

=== Kommandos auf dem Bootlader Prompt ===

==== Auto-boot ====

Auto-boot executes the command[s] specified in the ''bootcmd'' environment variable. The default configuration is:
<pre>
GTA01Bv3 # printenv
bootcmd=setenv bootargs ${bootargs_base} ${mtdparts}; nand read.e 0x32000000 kernel; bootm 0x32000000
</pre>

This basically tells us that it will load the content of the NAND partition '''kernel''' to memory address 0x32000000 and then try to boot it.  

==== Umgebung ====

u-boot is configured to manage a non-volatile environment that is stored in NAND flash.  You can use the commands to read/alter/store the environment in the following example:
<pre>
GTA01Bv2 # printenv
baudrate=115200
bootargs=rootfstype=jffs2 root=/dev/mtdblock4 console=ttySAC0,115200 console=tty0 loglevel=8 dyntick=enable lpj=252416
usbtty=cdc_acm
bootdelay=10
stdout=serial
stderr=serial
stdin=serial
mtdparts=mtdparts=neo1973-nand:0x00030000(u-boot),0x0000c000(u-boot_env),0x00200000(kernel),0x00130000(splash),0x03c94000(rootfs)
mtdids=nand0=neo1973-nand
bootargs_base=rootfstype=jffs2 root=/dev/mtdblock4 console=ttySAC0,115200 console=tty0 loglevel=8 dyntick=enable lpj=252416
bootcmd=setenv bootargs ${bootargs_base} ${mtdparts}; nand read.e 0x32000000 kernel; bootm 0x32000000
pcf50606_int1=0x40
filesize=160C000
partition=nand0,0
mtddevnum=0
mtddevname=u-boot

Environment size: 670/16380 bytes
GTA01Bv3 # setenv bootdelay 10
GTA01Bv3 # printenv bootdelay
bootdelay=10
GTA01Bv3 # saveenv
Saving Environment to NAND...
Erasing Nand...Writing to Nand... done
GTA01Bv3 # 
</pre>

Note: When setting multiple commands, e.g. for bootcmd, you need to escape the ';', for instance

<pre>
GTA01Bv3 # setenv bootcmd mmcinit\; ext2load mmc 0 0x32000000 uImage\; bootm 0x32000000
</pre>

==== MMC/SD ====

in order to initialize a MMC/SD card, you have to use the ``mmcinit'' command.
<pre>
GTA01Bv3 # mmcinit
trying to detect SD Card...
MMC found. Card desciption is:
Manufacturer ID = 58d564
HW/FW Revision = 3 8
Product Name = 21DN!@X�
Serial Number = 445303
Month = 5
Year = 2000
READ_BL_LEN=15, C_SIZE_MULT=7, C_SIZE=3197
size = 4208984064
GTA01Bv3 #
</pre>

afterwards, you can read ext2 filesystems like:
<pre>
GTA01Bv3 # ext2ls mmc 0
<DIR>       1024 .
<DIR>       1024 ..
<DIR>      12288 lost+found
         1544788 uImage
</pre>

==== NAND ====

<pre>
GTA01Bv3 # help nand
nand info                  - show available NAND devices
nand device [dev]     - show or set current device
nand read[.jffs2]     - addr off size
nand write[.jffs2]    - addr off size - read/write `size' bytes starting
    at offset `off' to/from memory address `addr'
nand erase [clean] [off size] - erase `size' bytes from
    offset `off' (entire device if not specified)
nand bad - show bad blocks
nand dump[.oob] off - dump page
nand scrub - really clean NAND erasing bad blocks (UNSAFE)
nand markbad off - mark bad block at offset (UNSAFE)
nand biterr off - make a bit error at offset (UNSAFE)
</pre>

===== Laden des Kernels aus dem NAND =====

<pre>
GTA01Bv3 # nand read 0x32000000 kernel

NAND read: device 0 offset 212992, size 2097152 ...  2097152 bytes read: OK
GTA01Bv3 # bootm 0x32000000
## Booting image at 32000000 ...
   Image Name:   OpenMoko Kernel Image Neo1973
   Created:      2007-02-15  23:54:18 UTC
   Image Type:   ARM Linux Kernel Image (gzip compressed)
   Data Size:    1546258 Bytes =  1.5 MB
   Load Address: 30008000
   Entry Point:  30008000
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK
Starting kernel ...
</pre>

===== Neuen Bootlader ins NAND schreiben =====

The following set of commands loads the file u-boot.bin from ext2/mmc and flashes it into the
bootloader flash partition:

<pre>
GTA01Bv3 # ext2load mmc 0 0x32000000 u-boot.bin
GTA01Bv3 # nand erase u-boot
GTA01Bv3 # nand write.e 0x32000000 u-boot ${filesize}
</pre>

===== Neuen Kernel ins NAND schreiben =====

The following set of commands loads the file uImage from ext2/mmc and flashes it into the
kernel flash partition:

<pre>
GTA01Bv3 # ext2load mmc 0 0x32000000 uImage
GTA01Bv3 # nand erase kernel
GTA01Bv3 # nand write.e 0x32000000 kernel ${filesize}
</pre>

===== Neues Hauptdateisystem (rootfs) ins NAND schreiben =====

The following set of commands loads the file rootfs.jffs2 from ext2/mmc and flashes it into the
rootfs flash partition:

<pre>
GTA01Bv3 # ext2load mmc 0 0x32000000 rootfs.jffs2
GTA01Bv3 # nand erase rootfs
GTA01Bv3 # nand write.e 0x32000000 rootfs ${filesize}
</pre>

Please note that this will only work with root file system sizes that are smaller than the amount of memory above 0x32000000, which in the case of 64MB SDRAM is something like 32MB.

==== Unter Neo1973 verfügbare Kommandos ====

Our version of u-boot supports a couple of Neo1973 specific commands:
<pre>
GTA01Bv2 # help neo1973
neo1973 neo1973 info - display phone informantion
neo1973 power-off - switch off the phone
neo1973 charger status - display charger status
neo1973 charger autofast - enable automatic fast (500mA) charging
neo1973 charger !autofast - disable automatic fast (500mA) charging
neo1973 charger fast - enable fast (500mA) charging
neo1973 charger off - disable charging
neo1973 backlight (on|off) - switch backlight on or off
neo1973 vibrator (on|off) - switch vibrator on or off
neo1973 udc pullup (on|off) - switch pull-up on or off
</pre>

What's the udc?


===== Timeouts =====

If the boot loader menu is on the screen, the phone will power off when there hasn't been activity for a while. This is not nice if you are working on the boot loader console, but you can make the time longer:
<pre>
setenv boot_menu_timeout [seconds]
</pre>

After the phone is powered on, there is a short period of time when you can connect to the console and cancel the automatic boot without going to the menu:
<pre>
setenv bootdelay [seconds]
</pre>

===== Power-off =====

Using
 neo1973 power-off

you can switch the device off from the bootloader prompt.

===== Battery charger related =====

For a detailed description of the charger basics, see [[Neo1973 Battery Charger]].

====== Erkennen des Ladezustandes ======

You can get the current charger status by issuing
 neo1973 charger status

The following modes are possible:

* idle - no charging
* trickle - FIXME
* pre - Slow (100mA) charging, works in hardware.
* fast_cccv - Fast (500mA) charging, using Constant-Current followed by Constant Voltage (Li-Ion)

====== Ausschalten des Ladevorganges ======

You can disable battery charging (until the next reboot) by issuing
 neo1973 charger off

====== Schnelle Aufladung erzwingen ======

Using
 neo1973 charger fast
you can force the PMU to try to do a fast (500mA) charge of the battery. It will abort if the battery is in over temperature or some other error condition occurs.

The following commands will add a boot menu entry that switches to fast charging and turns off the backlight:
  setenv menu_6 Fast-Charge and Backlight Off: neo1973 charger fast\; neo1973 backlight off
  saveenv

While in this state, your Neo1973 can be charged with a generic USB charger. You also need to set 
 setenv boot_menu_timeout 65000
 saveenv
to keep it from powering down, though.

====== Einschalten / Ausschalten der automatischen Aufladung ======

Autofast is a feature of the PCF50606 PMU.  It means that the fast_cccv mode will be automatically selected if a charger with suitable voltage is plugged in, and the battery not in over temperature condition.

{{warning|This is potentially dangerous.  Only enable autofast if you ARE SURE that you can draw 500mA from the USB connector.  This is the case with a wall outlet charger, or if you are attached to a self-powered hub or a desktop PC root hub.  Bus powered hubs and some laptops only provide 100mA on their USB ports and can thus not support fast charging}}

You can enable or disable autofast by 
 neo1973 charger autofast
and
 neo1973 charger !autofast
respectively.

===== Hintergrundbeleuchtung =====

You can switch the backlight on and off by using
 neo1973 backlight on
and
 neo1973 backlight off
respectively.

===== Vibrator =====

You can switch the vibrator on and off by using
 neo1973 vibrator on
and 
 neo1973 vibrator off
respectively.


===== GSM =====

Starting with OpenMoko patchset '''SVN revision 2885''', u-boot contains support for powering the GSM modem,
and even accessing the modem from the console.

====== GSM power ======

You can switch the GSM modem on and off by using
 neo1973 gsm on
and
 neo1973 gsm off
respectively.

====== Terminal Modus ======

You can access the GSM modem using openmoko's built-in terminal emulator in u-boot.

The following example demonstrates how:

<pre>
GTA01Bv4 # neo1973 gsm on
GTA01Bv4 # terminal serial
switching s3ser0 from console into GSM mode
Entering terminal mode for port serial
Use '~.' to leave the terminal and get back to u-boot
ATE1
OK
AT+CGMI?
ERROR
AT+CGMI
FIC

OK
AT+CGMR
GTA01Bv4

OK
~[u-boot]~.
switched s3ser0 from GSM mode back into console mode
GTA01Bv4 # neo1973 gsm off
GTA01Bv4 #
</pre>

{{note|If you're using the ''cu'' terminal emulator on your host PC to access u-boot, you have
to press '~' twice in order to escape it and make sure it actually gets sent to the Neo!}}

==== S3C2410 spezifische Kommandos ====

<pre>
GTA01Bv2 # help s3c2410
s3c2410 speed get - display current PLL speed config
s3c2410 speed list - display supporte PLL speed configs
s3c2410 speed set - set PLL speed
GTA01Bv2 # s3c2410 speed list
50 MHz
101 MHz
202 MHz
266 MHz
GTA01Bv2 # s3c2410 speed get
FCLK = 202 MHz, HCLK = 101 MHz, PCLK = 50 MHz
GTA01Bv2 # s3c2410 speed set 101
GTA01Bv2 # s3c2410 speed get
FCLK = 101 MHz, HCLK = 50 MHz, PCLK = 50 MHz
</pre>

===== 266MHz Taktfrequenz =====

You can re-configure the [[S3C2410]] PLL to generate a 266 MHz core cpu clock (rather than the 200MHz default) by using
 GTA01Bv2 # s3c2410 speed set 266 
and
 GTA01Bv2 # s3c2410 speed set 202
respectively.

{{warning|The old hardware (Phase 0 - GTA01Bv3) only runs stable at 266MHz if you do not attach anything (esp. the FPC / [[Debug Board]] to the Debug Port}}

==== TFTP auf QT2410 ====

The QT2410 cs8900a Ethernet can be used to download images via network.

First, you have to make sure that ''ipaddr'', ''serverip'', ''ethaddr' and ''netmaskk'' are set correctly in the environment:

<pre>
QT2410 # printenv
ethaddr=00:01:02:03:04:05
netmask=255.255.255.0
ipaddr=192.168.100.100
serverip=192.168.100.1
</pre>


===== TFTP Kernel Download =====

<pre>
QT2410 # tftpboot 0x32000000
*** Warning: no boot file name; using 'C0A86464.img'
TFTP from server 192.168.100.1; our IP address is 192.168.100.100
Filename 'C0A86464.img'.
Load address: 0x32000000
Loading: #################################################################
         #################################################################
         #################################################################
         #################################################################
         ##########################################
done
Bytes transferred = 1544788 (179254 hex)
</pre>

you can then commence booting via
<pre>
QT2410# bootm 0x32000000
</pre>

== Device Firmware Upgrade ==

Our version of u-boot also implements [[USB DFU]]. This can be useful to
load files and kernel for quick testing.

To find out whether your version of u-boot supports this, use the output of
 $ lsusb -v -d 1457:5119
while the phone is in u-boot mode.

If it supports DFU, you should see the following snippet towards the end of the output:
<pre>
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        2
      bAlternateSetting       0
      bNumEndpoints           0
      bInterfaceClass       254 Application Specific Interface
      bInterfaceSubClass      1 Device Firmware Update
      bInterfaceProtocol      1 
      iInterface              0 
</pre>

For information on how to do firmware upgrades, please see [[dfu-util]].

=== Booting files over DFU ===

To load a file at memory address 0x32000000:
<pre>
dfu-util -a 0 -D fileToLoad -R
</pre>

After that, send 'bootm 0x32000000' to u-boot or 'bootelf 0x32000000' if
its an elf file.

Simple python script that can boot an ELF image - avoiding a ACM bug that breaks on large packets.

<pre>
#!/usr/bin/python
import sys
import os
import time

cmd1 = "neo backlight off\n"
cmd2 = "bootelf 0x32000000\n"

def output(tty, str):
    for x in str:
        tty.write(x)
        tty.flush()

if len(sys.argv) == 2:
    print "Loading %s..." % sys.argv[1]

    loadfile = "dfu-util -a 0 -D %s -R" % sys.argv[1]

    os.system(loadfile)

    time.sleep(3)

    tty = open("/dev/ttyACM0", "a")

    output(tty, cmd1)
    output(tty, cmd2)

    tty.close()
else:
    print "Usage: %s elffile" % sys.argv[0]
    print ""
    sys.exit(2)
</pre>

== Troubleshooting ==

=== USB connectivity problems ===

I once got errors like this (in dmesg or /var/log/messages) on the host side while connecting the neo in u-boot:

 usb 2-1: device descriptor read/64, error -110
 usb usb2: Controller not stopped yet!

The problem disappeared at least for me by the command below on the host side. Please note that if you have usb keyboard or mouse then the command might cause trouble.. I only have PS/2 so I couldn't test it.

 rmmod uhci_hcd ; modprobe uhci_hcd

{{Languages|Bootloader}}

[[Category:Software]]
[[Category:Guides]]
