{{Languages|Toolchain}}


= Introduction =

A toolchain is a set of tools that allows you to compile code. For Openmoko, we have to differentiate between the following use-cases:

== Developing a single application ==

For this, you should use a prebuilt toolchain from the Openmoko project. Here you can find a recipe to get started with this toolchain leading you through a series of steps to compile a project and run it on your target device. You might have heard about [[OpenEmbedded]], however as an application programmer, you should '''not''' be using [[OpenEmbedded]].

== System Integration and customizing a distribution ==

For this task, you should use [[OpenEmbedded]] which builds its own cross compiler during the bootstrapping/build process. System Integration and customizing a distribution is out of scope of this page.

=Basic toolchain usage=

==Prerequisites==

You should be reasonably familiar with Linux and its command line tools, have an x86-compatible computer with at least 1G of free disk space. You should have experience with compiling programs from source using your local compiler. The remainder of this document will also assume you have write access in your home directory (~) and <tt>/usr/local/</tt> (becoming root if needed). If any of this is not the case, please call your local administrator for help.

Last but not least you should have a working setup that allows you to compile native software packages using the autotools build system (the triade of '''./configure, make, make install''').

A (partial) list of required packages -- please append as necessary:

* For most Linux version you might only need to install the packages
** autoconf, automake
** binutils, gcc, gcc-c++
** libtool
** ccache
** intltool

* For Ubuntu 8.04 ( Previous versions don't support libmokoui2 ) the following is required:
 sudo apt-get install gcc g++ autoconf automake binutils libtool libglib2.0-dev ccache libxrender-dev intltool libmokoui2-dev libgconf2-dev mtool

* For Fedora-Core the following is required:
 sudo yum install gcc g++ autoconf automake binutils libtool libglib2.0-dev ccache libxrender-dev intltool

==Downloading and installing==

The prebuilt toolchain can be downloaded from [http://downloads.openmoko.org/toolchains downloads.openmoko.org]:

* Creating a destination directory can be anywhere, but for example:

  mkdir ~/sources
  cd ~/sources

* Depending on your CPU type (x86_64 or i686) download the proper package:

  wget http://downloads.openmoko.org/toolchains/openmoko-x86_64-arm-linux-gnueabi-toolchain.tar.bz2
 or
  wget http://downloads.openmoko.org/toolchains/openmoko-i686-arm-linux-gnueabi-toolchain.tar.bz2


Next, you want to extract it on your filesystem. This toolchain is ''not'' relocatable, it needs to be installed into <tt>/usr/local/openmoko/</tt>.
Now you have the following options:

* Extract it directly as root, so use command "su" first (or prefix the tar command with "sudo" when you are using Debian/Ubuntu):

   cd /
   tar -xjvf ~/sources/openmoko-XYZ-arm-linux-gnueabi-toolchain.tar.bz2

* On Debian-based systems, you can use alien(+fakeroot) to create an easy-to-uninstall package from this .tar.bz2 (install with dpkg -i <package.deb>):

   bunzip2 openmoko-x86_64-arm-linux-gnueabi-toolchain.tar.bz2
   gzip openmoko-x86_64-arm-linux-gnueabi-toolchain.tar
   fakeroot alien -d openmoko-x86_64-arm-linux-gnueabi-toolchain.tar.gz

* The prebuilt toolchain is for x86_64 or i686. If you wanted, you could build it on your own with OE:

   bitbake meta-toolchain-openmoko

Finally, everytime you want to use this toolchain, you need to alter some environment variables, so that your tools will be found. The toolchain provides a script to do that, so the only thing you need to do is to source it.
Note that if you are not using a "sh" or "bash" shell (check with "echo $SHELL") that you need
to start "sh" or "bash" first.

 . /usr/local/openmoko/arm/setup-env

* At last, you should add /usr/local/openmoko/arm/bin to your $PATH variable, otherwise the next steps won't work (om-conf and make).

==Building a sample project==

In a chosen destination directory (in this example ~/):

* copy the downloaded sample application source:

 cp -r /usr/local/openmoko/source/openmoko-sample2 ~/

* Remember to set the proper environment variables (again with "sh" or "bash") for openmoko:

 . /usr/local/openmoko/arm/setup-env

* You need to create a build configuration for this application. This also checks if all needed libraries, tools, etc.. is available on your system. If this fails see the notes about the needed packages in the section "Prerequisites" mentioned earlier.

 om-conf openmoko-sample2

* Optionally now you can modify the source code in openmoko-sample2/src

* To build the application from the source code you only need to use "make":

 cd openmoko-sample2
 make

If you want to install this project on host for staging usage later, a shared library, for example, you can do the following to install it into a given configured prefix.

 om-conf --prefix=/usr/local/openmoko openmoko-sample2
 cd openmoko-sample2
 make install

==How to modify the sample project==

In order to build your own project by using openmoko-sample2 files, some changes are needed:

* copy the downloaded sample application source

 cp -r /usr/local/openmoko/source/openmoko-sample2 ~/
 
* rename the folder with the name of your project (in this example your-project-name) and delete old sample files 

 mv openmoko-sample2 your-project-name
 cd your-project-name
 cd src
 rm *.c

* copy your sources (in this example your-sources) into src/

 cp your-sources .
 cd ..

* now in the main folder modify autogen.sh by updating the following lines

 PKG_NAME="your-project-name"

* modify configure.ac by updating the following lines ('main.c' should be the main file in your project)

 AC_INIT(your-project-main, 0.0.1, http://www.openmoko.org/)    
 AC_CONFIG_SRCDIR(src/main.c)

* go into data/ folder and rename these files with the name of your project

 cd data
 mv openmoko-sample.png your-project-name.png
 mv openmoko-sample.desktop your-project-name.desktop

* modify Makefile.am inside data/ by updating the following lines

 dist_desktop_DATA = your-project-name.desktop
 dist_appicon_DATA = your-project-name.png

* modify Makefile.in inside data/ by updating the following lines
 
 dist_desktop_DATA = smart-search.desktop
 dist_appicon_DATA = smart-search.png

* modify your-project-name.desktop by updating the following lines

 Name=your-project-name
 Encoding=UTF-8
 Version=0.0.1
 Type=Application
 Exec=your-project-name

* and by adding the following line

 Icon=your-project-name

* move into src/ folder

 cd ..
 cd src

* modify Makefile.am by updating the following lines

 bin_PROGRAMS = your-project-name	
 your_project_name_SOURCES = \				
  		main.c 
 your_project_name_LDADD  = @DEPENDENCIES_LIBS@

* be sure to put instead of main.c all your .c and .h files and modify all the '-' characters with '_' in the variable names

==Packaging your application==

We have included a script to make an ipkg out of your application. Note that this is not needed to test your application on the Neo (for that you can just scp the resulting binary and data over), however it's very handy if you want to distribute your application to others.

 om-make-ipkg openmoko-sample2

Now you got openmoko-sample2_0.1_armv4t.ipk , you can `scp' it to your
Neo and install it:

 scp openmoko-sample2_0.1_armv4t.ipk root@192.168.0.202:
 ssh root@192.168.0.202 ipkg install openmoko-sample2_0.1_armv4t.ipk

Note that while you can redistribute the generated ipkg, be aware that this is a bare-bones ipk that contains no further information, i.e. you will lack library dependencies. See below how to fix this.

You can also supply the version number, a description, and an author / contacts string in a control file:

 om-make-ipkg myapp myapp_control

A template of myapp_control:

 Package: $appname
 Version: 0.1
 Description: package built by openmoko toolchain
 Section: openmoko/applications
 Priority: optional
 Maintainer: $USER
 Architecture: armv4t
 Homepage: http://www.openmoko.org/
 Depends: 
 Source: ${SRC}

==Where to go from here==

Using the external toolchain is an easy way to build applications for your Neo. If you are familiar with this procedure, you might also want to look into
* Using [[Qemu]] to test your applications in an emulated environment
** Ubuntu users might prefer to look at [[Automatic_emulation_in_Ubuntu]]
* Using [[Host-based_development_with_Xoo_and_Xephyr|host-based development]] to improve your efficiency
* Using [[OpenEmbedded]] to customize your Openmoko distribution image

=Advanced topics=
==Using toolchain provided libraries==
Add the necessary libraries to the _LDADD field in src/Makefile.am, for example:
 openmoko_sample2_LDADD  = @DEPENDENCIES_LIBS@ -lmokogsmd2

make sure to run om-conf again after this.

==Installing additional libraries into the toolchain==

Sooner or later you will want to compile an application that has dependencies which can't be fulfilled by the precompiled toolchain, e.g. some obscure libraries.

In that case, feel free to request the inclusion of additional libraries into the next release of the OpenMoko toolchain. Until then, here is how you enhance your already installed toolchain. Say, we want to add the library called liburiparse:

 cd ~/source
 wget http://downloads.sourceforge.net/uriparser/uriparser-0.6.0.tar.bz2
 ./configure --host=arm-angstrom-linux-gnueabi --prefix=/usr/local/openmoko/arm
 make
 make install

That's it.

==Getting your application packaged by OE==

If you have written a cool application which you want to share with others, the best way to do that is to

# upload your application source code to a public location
# submit a [[BitBake]] recipe to [[OpenEmbedded]], preferably via the [http://bugzilla.openembedded.org OpenEmbedded bugtracker].

See also [[Customizing the Openmoko Distribution]].

==Troubleshooting==

* Please use the [http://lists.openmoko.org/mailman/listinfo/openmoko-devel Openmoko-Devel] mailing list.


[[Category:Software ]]
[[Category:Application Developer]]
[[Category:Openmoko]]
