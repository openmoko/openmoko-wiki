{{Languages|OpenmokoFramework}}
{{FSO}}

'''FSO (freesmartphone.org)''' is a project to create a standardized service layer ([http://en.wikipedia.org/wiki/Middleware middleware]) for Linux-based phones. It was funded by Openmoko Inc. from January 2008 until March 2009. Focus is on stable highlevel services that you can access from whatever language or UI that supports [http://dbus.freesmartphone.org/ dbus]. The FSO middleware has been integrated into most of the current [[distributions]] including [[SHR]], [[Om 2009]], [[neovento]], [[Debian]] and [[Gentoo]]. At the moment FSO only works on the Openmoko phones. There is work in progress for bringing it to the Palm Pre and several HTC devices. For more information see http://www.freesmartphone.org, http://docs.freesmartphone.org, and http://trac.freesmartphone.org. 

==Building FSO==
See [[Building_FSO]] for more information. The feeds are now at http://downloads.freesmartphone.org.

==History==
* ''2009-10-31: [http://trac.freesmartphone.org/milestone/milestone6 milestone 6]''
* 2009-07-10: [[OpenmokoFramework/Status Update 7|milestone 5.5]] achieved
* 2009-02-02: [[OpenmokoFramework/Status Update 6|milestone 5]] achieved
* 2008-11-11: [[OpenmokoFramework/Status Update 5|milestone 4]] achieved
* 2008-09-10: [[OpenmokoFramework/Status Update 4|milestone 3]] achieved
* 2008-07-01: [[OpenmokoFramework/Status Update 3|milestone 2]] achieved
* 2008-06-01: [[OpenmokoFramework/Status Update 2|milestone 1]] achieved

The current progress is documented on the freesmartphone.org website

==Purposes==
* Give people the infrastructure to create solid and exciting software products based on the Openmoko platform
* Support competing UIs while collaborating on developing services
* Encourage framework users (e.g. application developers) to also contribute to the framework

==Requirements==
* Make it simple
* Concentrate on core services
* Be programming language agnostic
* Be UI toolkit agnostic
* Try to reuse existing technologies as much as possible, but not at the cost of a bad API

==How to achieve that technically==
* Choose [[D-Bus]] as the collaboration line. Below dbus, we can work together. Above dbus, we can differentiate
* Expose features through dbus APIs implemented by UI-agnostic and language-agnostic services (daemons)
* Optimize for Openmoko devices, but support multiple architectures and purposes through plugin interfaces and suitable hardware abstraction mechanisms
* By not being afraid of reinventing the wheel for a wheelbarrow if all the existing wheels are made for sports cars

==Mandatory Reading==
* [http://adam.gomaa.us/blog/frameworks-exist-for-conceptual-integrity/ Frameworks exist for conceptual integrity]
* [http://humanized.com/weblog/2007/10/05/make_oss_humane/ Ten ways to make more humane open source software]

==Architectural Overview==
[[Image:OpenmokoFramework08.png |632px|frontside]]

==Software Components==

Please see the description at http://www.wiki.freesmartphone.org/index.php/Architecture

==Known API Consumers==

* [[Zhone]]
* [[SHR]]
* [[Tichy]]
* [[Paroli]]

==Tools==
* [[OpenmokoFramework/mdbus|mdbus]] -- a dbus introspection and interaction utility,
* [[OpenmokoFramework/cli|cli-framework]] -- a python dbus command line interface.
* [[OpenmokoFramework/mickeyterm|mickeyterm]] -- a MUXer-aware minimal terminal emulator.

==Scripts==
* Example [[OpenmokoFramework/scripts|Scripts]] that work over dbus

==How to debug==
# log in via ssh
# killall python
# edit /etc/frameworkd.conf and add to the frameworkd section:
## log_level = DEBUG
## log_to = file
## log_destination = /somewhere/where/you/have/space (preferably SD or NFS, etc.)
# Read our [http://git.freesmartphone.org/?p=framework.git;a=blob;f=conf/example/frameworkd.conf documented frameworkd.conf] configuration file to learn about the other options.
# relaunch frameworkd (/etc/init.d/frameworkd stop; /etc/init.d/frameworkd start)
# log in via ssh (yes, again)
# export DISPLAY=:0.0
# run your favourite client (zhone, cli-framework, ...)

Attach the logs to the tickets, please.

==The role of Python==

Where we write new code, we will use Python to implement the dbus services. The reason for that being the rapid prototyping nature of Python and the emphasis on the [[D-Bus]] APIs. Using Python, the turnaround times to experiment with APIs are incredibly faster than for using a compiled language such as C or C++.

Once the APIs have been used by application programmers, we can start profiling and possibly reimplement some of the services with daemons written in Vala, ''if'' necessary. We might as well succeed in improving performance by using Pyrex/Cython/Ctypes to keep the benefits of Python.

==Team==

* [[User:Mickey|Michael 'Mickey' Lauer]] (team leader) -- Openmoko freelancer, working in Frankfurt/Main, Germany.
* [[User:Shoragan|Jan 'Shoragan' Luebbe]] -- Openmoko student, working part-time in Brunswick, Germany.
* [[User:DanielWillmann|Daniel 'Alphaone' Willmann]] -- Openmoko student, working part-time in Brunswick, Germany.
* [[User:StefanSchmidt|Stefan Schmidt]] -- Openmoko student, working part-time in Brunswick, Germany.

== Download and see also ==

* [http://trac.freesmartphone.org/ Development tracker]
* [http://freesmartphone.org freesmartphone.org]
* [http://downloads.freesmartphone.org fso-testing and fso-unstable images and feeds] (maintained by Rod Whitby, MokoMakefile author)
* [http://linuxtogo.org/~mickeyl/fso-stable/ fso-stable images] - ready to install images for om-gta01 and om-gta-02
* [http://www.restorationsos.com Water Removal] The Most Helpful Restoration Service in America - Affordable Services in Your Area - 24/7 Hotline.

[[Category:Framework| ]]
[[Category:FSO| ]]
